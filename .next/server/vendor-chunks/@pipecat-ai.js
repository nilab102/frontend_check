"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@pipecat-ai";
exports.ids = ["vendor-chunks/@pipecat-ai"];
exports.modules = {

/***/ "(ssr)/./node_modules/@pipecat-ai/client-js/dist/index.module.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@pipecat-ai/client-js/dist/index.module.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionEndpointNotSetError: () => (/* binding */ $8ead7b33b8402751$export$be839f0100cd3132),\n/* harmony export */   BotNotReadyError: () => (/* binding */ $8ead7b33b8402751$export$885fb96b850e8fbb),\n/* harmony export */   ConfigUpdateError: () => (/* binding */ $8ead7b33b8402751$export$4eda4fd287fbbca5),\n/* harmony export */   ConnectionTimeoutError: () => (/* binding */ $8ead7b33b8402751$export$c67992fa684a81a6),\n/* harmony export */   LLMActionType: () => (/* binding */ $0908f693e3e0724c$export$43cdfb26f790451),\n/* harmony export */   LLMHelper: () => (/* binding */ $0908f693e3e0724c$export$3cf39a62d076dd5c),\n/* harmony export */   LLMMessageType: () => (/* binding */ $0908f693e3e0724c$export$441bcd2e10762760),\n/* harmony export */   LogLevel: () => (/* binding */ $7afbbd59ebaa42bf$export$243e62d78d3b544d),\n/* harmony export */   MessageDispatcher: () => (/* binding */ $b48f893ed1354c1e$export$e9a960646cc432aa),\n/* harmony export */   RTVIActionRequest: () => (/* binding */ $b48f893ed1354c1e$export$378529d7a8bead8b),\n/* harmony export */   RTVIClient: () => (/* binding */ $a7c324a73303ad55$export$fa42a01c1d60f4a1),\n/* harmony export */   RTVIClientHelper: () => (/* binding */ $7614fb2168c523cc$export$23bc637255b2a471),\n/* harmony export */   RTVIError: () => (/* binding */ $8ead7b33b8402751$export$59b4786f333aac02),\n/* harmony export */   RTVIEvent: () => (/* binding */ $f9fc0c57b9aaed9c$export$6b4624d233c61fcb),\n/* harmony export */   RTVIMessage: () => (/* binding */ $b48f893ed1354c1e$export$69aa9ab0334b212),\n/* harmony export */   RTVIMessageType: () => (/* binding */ $b48f893ed1354c1e$export$38b3db05cbf0e240),\n/* harmony export */   RTVI_MESSAGE_LABEL: () => (/* binding */ $b48f893ed1354c1e$export$882b13c7fda338f5),\n/* harmony export */   StartBotError: () => (/* binding */ $8ead7b33b8402751$export$e7544ab812238a61),\n/* harmony export */   Transport: () => (/* binding */ $4086f06442fcb7d7$export$86495b081fef8e52),\n/* harmony export */   TransportStartError: () => (/* binding */ $8ead7b33b8402751$export$e0624a511a2c4e9),\n/* harmony export */   TransportWrapper: () => (/* binding */ $4086f06442fcb7d7$export$82b6ede160a64a3c),\n/* harmony export */   httpActionGenerator: () => (/* binding */ $4bb349f22aee5185$export$8728b60ea57bf43e),\n/* harmony export */   logger: () => (/* binding */ $7afbbd59ebaa42bf$export$af88d00dbe7f521)\n/* harmony export */ });\n/* harmony import */ var clone_deep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clone-deep */ \"(ssr)/./node_modules/clone-deep/index.js\");\n/* harmony import */ var clone_deep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(clone_deep__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n\n\n\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $4bb349f22aee5185$exports = {};\n\n$parcel$export($4bb349f22aee5185$exports, \"httpActionGenerator\", () => $4bb349f22aee5185$export$8728b60ea57bf43e);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \nasync function $4bb349f22aee5185$export$8728b60ea57bf43e(actionUrl, action, params, handleResponse) {\n    try {\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI] Fetch action\", actionUrl, action);\n        const headers = new Headers({\n            ...Object.fromEntries((params.headers ?? new Headers()).entries())\n        });\n        if (!headers.has(\"Content-Type\")) headers.set(\"Content-Type\", \"application/json\");\n        headers.set(\"Cache-Control\", \"no-cache\");\n        headers.set(\"Connection\", \"keep-alive\");\n        // Perform the fetch request\n        const response = await fetch(actionUrl, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n                ...params.requestData,\n                actions: [\n                    action\n                ]\n            })\n        });\n        // Check the response content type\n        const contentType = response.headers.get(\"content-type\");\n        // Handle non-ok response status\n        if (!response.ok) {\n            const errorMessage = await response.text();\n            throw new (0, $8ead7b33b8402751$export$59b4786f333aac02)(`Failed to resolve action: ${errorMessage}`, response.status);\n        }\n        if (response.body && contentType?.includes(\"text/event-stream\")) {\n            // Parse streamed responses\n            const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();\n            let buffer = \"\";\n            while(true){\n                const { value: value, done: done } = await reader.read();\n                if (done) break;\n                buffer += value;\n                let boundary = buffer.indexOf(\"\\n\\n\");\n                while(boundary !== -1){\n                    const message = buffer.slice(0, boundary);\n                    buffer = buffer.slice(boundary + 2);\n                    // Split on the first \":\" to extract the JSON part\n                    const lines = message.split(\"\\n\");\n                    let encodedData = \"\";\n                    for (const line of lines){\n                        const colonIndex = line.indexOf(\":\");\n                        if (colonIndex !== -1) encodedData += line.slice(colonIndex + 1).trim();\n                    }\n                    try {\n                        const jsonData = atob(encodedData);\n                        const parsedData = JSON.parse(jsonData);\n                        handleResponse(parsedData);\n                    } catch (error) {\n                        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error(\"[RTVI] Failed to parse JSON:\", error);\n                        throw error;\n                    }\n                    boundary = buffer.indexOf(\"\\n\\n\");\n                }\n            }\n        } else {\n            // For regular non-streamed responses, parse and handle the data as JSON\n            const data = await response.json();\n            handleResponse(data);\n        }\n    } catch (error) {\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error(\"[RTVI] Error during fetch:\", error);\n        throw error;\n    }\n} /*\n//@TODO: implement abortController when mode changes / bad things happen\nexport async function dispatchAction(\n  this: RTVIClient,\n  action: RTVIActionRequest\n): Promise<RTVIActionResponse> {\n  const promise = new Promise((resolve, reject) => {\n    (async () => {\n      if (this.connected) {\n        return this._messageDispatcher.dispatch(action);\n      } else {\n        const actionUrl = this.constructUrl(\"action\");\n        try {\n          const result = await httpActionGenerator(\n            actionUrl,\n            action,\n            this.params,\n            (response) => {\n              this.handleMessage(response);\n            }\n          );\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    })();\n  });\n\n  return promise as Promise<RTVIActionResponse>;\n}\n*/ \n\n\nvar $a7c324a73303ad55$exports = {};\n\n$parcel$export($a7c324a73303ad55$exports, \"RTVIClient\", () => $a7c324a73303ad55$export$fa42a01c1d60f4a1);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\nvar $e3bad9cc25e327f7$exports = {};\n$e3bad9cc25e327f7$exports = JSON.parse(\"{\\\"name\\\":\\\"@pipecat-ai/client-js\\\",\\\"version\\\":\\\"0.4.1\\\",\\\"license\\\":\\\"BSD-2-Clause\\\",\\\"main\\\":\\\"dist/index.js\\\",\\\"module\\\":\\\"dist/index.module.js\\\",\\\"types\\\":\\\"dist/index.d.ts\\\",\\\"source\\\":\\\"src/index.ts\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/pipecat-ai/pipecat-client-web.git\\\"},\\\"files\\\":[\\\"dist\\\",\\\"package.json\\\",\\\"README.md\\\"],\\\"scripts\\\":{\\\"build\\\":\\\"jest --silent && parcel build --no-cache\\\",\\\"dev\\\":\\\"parcel watch\\\",\\\"lint\\\":\\\"eslint src/ --report-unused-disable-directives --max-warnings 0\\\",\\\"test\\\":\\\"jest\\\"},\\\"jest\\\":{\\\"preset\\\":\\\"ts-jest\\\",\\\"testEnvironment\\\":\\\"node\\\"},\\\"devDependencies\\\":{\\\"@jest/globals\\\":\\\"^29.7.0\\\",\\\"@types/clone-deep\\\":\\\"^4.0.4\\\",\\\"@types/jest\\\":\\\"^29.5.12\\\",\\\"@types/uuid\\\":\\\"^10.0.0\\\",\\\"eslint\\\":\\\"^9.11.1\\\",\\\"eslint-config-prettier\\\":\\\"^9.1.0\\\",\\\"eslint-plugin-simple-import-sort\\\":\\\"^12.1.1\\\",\\\"jest\\\":\\\"^29.7.0\\\",\\\"ts-jest\\\":\\\"^29.2.5\\\"},\\\"dependencies\\\":{\\\"@types/events\\\":\\\"^3.0.3\\\",\\\"clone-deep\\\":\\\"^4.0.1\\\",\\\"events\\\":\\\"^3.3.0\\\",\\\"typed-emitter\\\":\\\"^2.1.0\\\",\\\"uuid\\\":\\\"^10.0.0\\\"}}\");\n\n\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $8ead7b33b8402751$exports = {};\n\n$parcel$export($8ead7b33b8402751$exports, \"RTVIError\", () => $8ead7b33b8402751$export$59b4786f333aac02);\n$parcel$export($8ead7b33b8402751$exports, \"ConnectionTimeoutError\", () => $8ead7b33b8402751$export$c67992fa684a81a6);\n$parcel$export($8ead7b33b8402751$exports, \"StartBotError\", () => $8ead7b33b8402751$export$e7544ab812238a61);\n$parcel$export($8ead7b33b8402751$exports, \"TransportStartError\", () => $8ead7b33b8402751$export$e0624a511a2c4e9);\n$parcel$export($8ead7b33b8402751$exports, \"BotNotReadyError\", () => $8ead7b33b8402751$export$885fb96b850e8fbb);\n$parcel$export($8ead7b33b8402751$exports, \"ConfigUpdateError\", () => $8ead7b33b8402751$export$4eda4fd287fbbca5);\n$parcel$export($8ead7b33b8402751$exports, \"ActionEndpointNotSetError\", () => $8ead7b33b8402751$export$be839f0100cd3132);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ class $8ead7b33b8402751$export$59b4786f333aac02 extends Error {\n    constructor(message, status){\n        super(message);\n        this.status = status;\n    }\n}\nclass $8ead7b33b8402751$export$c67992fa684a81a6 extends $8ead7b33b8402751$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Bot did not enter ready state within the specified timeout period.\");\n    }\n}\nclass $8ead7b33b8402751$export$e7544ab812238a61 extends $8ead7b33b8402751$export$59b4786f333aac02 {\n    constructor(message, status){\n        super(message ?? `Failed to connect / invalid auth bundle from base url`, status ?? 500);\n        this.error = \"invalid-request-error\";\n    }\n}\nclass $8ead7b33b8402751$export$e0624a511a2c4e9 extends $8ead7b33b8402751$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Unable to connect to transport\");\n    }\n}\nclass $8ead7b33b8402751$export$885fb96b850e8fbb extends $8ead7b33b8402751$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Attempt to call action on transport when not in 'ready' state.\");\n    }\n}\nclass $8ead7b33b8402751$export$4eda4fd287fbbca5 extends $8ead7b33b8402751$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Unable to update configuration\");\n        this.status = 400;\n    }\n}\nclass $8ead7b33b8402751$export$be839f0100cd3132 extends $8ead7b33b8402751$export$59b4786f333aac02 {\n    constructor(message){\n        super(message ?? \"Action endpoint is not set\");\n    }\n}\n\n\nfunction $16f019d4d16917df$export$f1586721024c4dab(_target, propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n        if (this.state === \"ready\") return originalMethod.apply(this, args);\n        else throw new (0, $8ead7b33b8402751$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ready state. Await connect() first.`);\n    };\n    return descriptor;\n}\nfunction $16f019d4d16917df$export$808994d0d8c9acb3(states) {\n    return function(_target, propertyKey, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.get = function(...args) {\n            if (states.includes(this.state)) return originalMethod.apply(this, args);\n            else throw new (0, $8ead7b33b8402751$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ${states}.`);\n        };\n        return descriptor;\n    };\n}\nfunction $16f019d4d16917df$export$5c35b4fe6fa8c9a6(...states) {\n    states = [\n        \"ready\",\n        ...states\n    ];\n    return function(_target, propertyKey, descriptor) {\n        const originalGetter = descriptor.get;\n        descriptor.get = function() {\n            if (states.includes(this.state)) return originalGetter?.apply(this);\n            else throw new (0, $8ead7b33b8402751$export$885fb96b850e8fbb)(`Attempt to call ${propertyKey.toString()} when transport not in ${states}. Await connect() first.`);\n        };\n        return descriptor;\n    };\n}\n\n\n\nvar $f9fc0c57b9aaed9c$exports = {};\n\n$parcel$export($f9fc0c57b9aaed9c$exports, \"RTVIEvent\", () => $f9fc0c57b9aaed9c$export$6b4624d233c61fcb);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $f9fc0c57b9aaed9c$export$6b4624d233c61fcb;\n(function(RTVIEvent) {\n    RTVIEvent[\"MessageError\"] = \"messageError\";\n    RTVIEvent[\"Error\"] = \"error\";\n    RTVIEvent[\"Connected\"] = \"connected\";\n    RTVIEvent[\"Disconnected\"] = \"disconnected\";\n    RTVIEvent[\"TransportStateChanged\"] = \"transportStateChanged\";\n    RTVIEvent[\"Config\"] = \"config\";\n    RTVIEvent[\"ConfigDescribe\"] = \"configDescribe\";\n    RTVIEvent[\"ActionsAvailable\"] = \"actionsAvailable\";\n    RTVIEvent[\"ParticipantConnected\"] = \"participantConnected\";\n    RTVIEvent[\"ParticipantLeft\"] = \"participantLeft\";\n    RTVIEvent[\"TrackStarted\"] = \"trackStarted\";\n    RTVIEvent[\"TrackStopped\"] = \"trackStopped\";\n    RTVIEvent[\"ScreenTrackStarted\"] = \"screenTrackStarted\";\n    RTVIEvent[\"ScreenTrackStopped\"] = \"screenTrackStopped\";\n    RTVIEvent[\"ScreenShareError\"] = \"screenShareError\";\n    RTVIEvent[\"AvailableCamsUpdated\"] = \"availableCamsUpdated\";\n    RTVIEvent[\"AvailableMicsUpdated\"] = \"availableMicsUpdated\";\n    RTVIEvent[\"AvailableSpeakersUpdated\"] = \"availableSpeakersUpdated\";\n    RTVIEvent[\"CamUpdated\"] = \"camUpdated\";\n    RTVIEvent[\"MicUpdated\"] = \"micUpdated\";\n    RTVIEvent[\"SpeakerUpdated\"] = \"speakerUpdated\";\n    RTVIEvent[\"BotConnected\"] = \"botConnected\";\n    RTVIEvent[\"BotReady\"] = \"botReady\";\n    RTVIEvent[\"BotDisconnected\"] = \"botDisconnected\";\n    RTVIEvent[\"BotStartedSpeaking\"] = \"botStartedSpeaking\";\n    RTVIEvent[\"BotStoppedSpeaking\"] = \"botStoppedSpeaking\";\n    RTVIEvent[\"RemoteAudioLevel\"] = \"remoteAudioLevel\";\n    RTVIEvent[\"UserStartedSpeaking\"] = \"userStartedSpeaking\";\n    RTVIEvent[\"UserStoppedSpeaking\"] = \"userStoppedSpeaking\";\n    RTVIEvent[\"LocalAudioLevel\"] = \"localAudioLevel\";\n    RTVIEvent[\"Metrics\"] = \"metrics\";\n    RTVIEvent[\"UserTranscript\"] = \"userTranscript\";\n    RTVIEvent[\"BotTranscript\"] = \"botTranscript\";\n    RTVIEvent[\"BotLlmText\"] = \"botLlmText\";\n    RTVIEvent[\"BotLlmStarted\"] = \"botLlmStarted\";\n    RTVIEvent[\"BotLlmStopped\"] = \"botLlmStopped\";\n    RTVIEvent[\"BotTtsText\"] = \"botTtsText\";\n    RTVIEvent[\"BotTtsStarted\"] = \"botTtsStarted\";\n    RTVIEvent[\"BotTtsStopped\"] = \"botTtsStopped\";\n    RTVIEvent[\"LLMFunctionCall\"] = \"llmFunctionCall\";\n    RTVIEvent[\"LLMFunctionCallStart\"] = \"llmFunctionCallStart\";\n    RTVIEvent[\"LLMJsonCompletion\"] = \"llmJsonCompletion\";\n    RTVIEvent[\"StorageItemStored\"] = \"storageItemStored\";\n    RTVIEvent[\"BotLlmSearchResponse\"] = \"botLlmSearchResponse\";\n    RTVIEvent[\"ServerMessage\"] = \"serverMessage\";\n})($f9fc0c57b9aaed9c$export$6b4624d233c61fcb || ($f9fc0c57b9aaed9c$export$6b4624d233c61fcb = {}));\n\n\nvar $7614fb2168c523cc$exports = {};\n\n$parcel$export($7614fb2168c523cc$exports, \"RTVIClientHelper\", () => $7614fb2168c523cc$export$23bc637255b2a471);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ class $7614fb2168c523cc$export$23bc637255b2a471 {\n    constructor(options){\n        this._options = options;\n    }\n    set client(client) {\n        this._client = client;\n    }\n    set service(service) {\n        this._service = service;\n    }\n}\n\n\nvar $7afbbd59ebaa42bf$exports = {};\n\n$parcel$export($7afbbd59ebaa42bf$exports, \"LogLevel\", () => $7afbbd59ebaa42bf$export$243e62d78d3b544d);\n$parcel$export($7afbbd59ebaa42bf$exports, \"logger\", () => $7afbbd59ebaa42bf$export$af88d00dbe7f521);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ var $7afbbd59ebaa42bf$export$243e62d78d3b544d;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"NONE\"] = 0] = \"NONE\";\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"INFO\"] = 3] = \"INFO\";\n    LogLevel[LogLevel[\"DEBUG\"] = 4] = \"DEBUG\";\n})($7afbbd59ebaa42bf$export$243e62d78d3b544d || ($7afbbd59ebaa42bf$export$243e62d78d3b544d = {}));\nclass $7afbbd59ebaa42bf$var$Logger {\n    constructor(){\n        this.level = $7afbbd59ebaa42bf$export$243e62d78d3b544d.DEBUG;\n    }\n    static getInstance() {\n        if (!$7afbbd59ebaa42bf$var$Logger.instance) $7afbbd59ebaa42bf$var$Logger.instance = new $7afbbd59ebaa42bf$var$Logger();\n        return $7afbbd59ebaa42bf$var$Logger.instance;\n    }\n    setLevel(level) {\n        this.level = level;\n    }\n    debug(...args) {\n        if (this.level >= $7afbbd59ebaa42bf$export$243e62d78d3b544d.DEBUG) console.debug(...args);\n    }\n    info(...args) {\n        if (this.level >= $7afbbd59ebaa42bf$export$243e62d78d3b544d.INFO) console.info(...args);\n    }\n    warn(...args) {\n        if (this.level >= $7afbbd59ebaa42bf$export$243e62d78d3b544d.WARN) console.warn(...args);\n    }\n    error(...args) {\n        if (this.level >= $7afbbd59ebaa42bf$export$243e62d78d3b544d.ERROR) console.error(...args);\n    }\n}\nconst $7afbbd59ebaa42bf$export$af88d00dbe7f521 = $7afbbd59ebaa42bf$var$Logger.getInstance();\n\n\nvar $b48f893ed1354c1e$exports = {};\n\n$parcel$export($b48f893ed1354c1e$exports, \"RTVI_MESSAGE_LABEL\", () => $b48f893ed1354c1e$export$882b13c7fda338f5);\n$parcel$export($b48f893ed1354c1e$exports, \"RTVIMessageType\", () => $b48f893ed1354c1e$export$38b3db05cbf0e240);\n$parcel$export($b48f893ed1354c1e$exports, \"RTVIMessage\", () => $b48f893ed1354c1e$export$69aa9ab0334b212);\n$parcel$export($b48f893ed1354c1e$exports, \"RTVIActionRequest\", () => $b48f893ed1354c1e$export$378529d7a8bead8b);\n$parcel$export($b48f893ed1354c1e$exports, \"MessageDispatcher\", () => $b48f893ed1354c1e$export$e9a960646cc432aa);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\n\n\nconst $b48f893ed1354c1e$export$882b13c7fda338f5 = \"rtvi-ai\";\nvar $b48f893ed1354c1e$export$38b3db05cbf0e240;\n(function(RTVIMessageType) {\n    // Outbound\n    RTVIMessageType[\"CLIENT_READY\"] = \"client-ready\";\n    RTVIMessageType[\"UPDATE_CONFIG\"] = \"update-config\";\n    RTVIMessageType[\"GET_CONFIG\"] = \"get-config\";\n    RTVIMessageType[\"DESCRIBE_CONFIG\"] = \"describe-config\";\n    RTVIMessageType[\"DESCRIBE_ACTIONS\"] = \"describe-actions\";\n    RTVIMessageType[\"DISCONNECT_BOT\"] = \"disconnect-bot\";\n    RTVIMessageType[\"ACTION\"] = \"action\";\n    // Inbound\n    RTVIMessageType[\"BOT_READY\"] = \"bot-ready\";\n    RTVIMessageType[\"ERROR\"] = \"error\";\n    RTVIMessageType[\"ERROR_RESPONSE\"] = \"error-response\";\n    RTVIMessageType[\"CONFIG\"] = \"config\";\n    RTVIMessageType[\"CONFIG_AVAILABLE\"] = \"config-available\";\n    RTVIMessageType[\"CONFIG_ERROR\"] = \"config-error\";\n    RTVIMessageType[\"ACTIONS_AVAILABLE\"] = \"actions-available\";\n    RTVIMessageType[\"ACTION_RESPONSE\"] = \"action-response\";\n    RTVIMessageType[\"METRICS\"] = \"metrics\";\n    RTVIMessageType[\"USER_TRANSCRIPTION\"] = \"user-transcription\";\n    RTVIMessageType[\"BOT_TRANSCRIPTION\"] = \"bot-transcription\";\n    RTVIMessageType[\"USER_STARTED_SPEAKING\"] = \"user-started-speaking\";\n    RTVIMessageType[\"USER_STOPPED_SPEAKING\"] = \"user-stopped-speaking\";\n    RTVIMessageType[\"BOT_STARTED_SPEAKING\"] = \"bot-started-speaking\";\n    RTVIMessageType[\"BOT_STOPPED_SPEAKING\"] = \"bot-stopped-speaking\";\n    // Service-specific\n    RTVIMessageType[\"USER_LLM_TEXT\"] = \"user-llm-text\";\n    RTVIMessageType[\"BOT_LLM_TEXT\"] = \"bot-llm-text\";\n    RTVIMessageType[\"BOT_LLM_STARTED\"] = \"bot-llm-started\";\n    RTVIMessageType[\"BOT_LLM_STOPPED\"] = \"bot-llm-stopped\";\n    RTVIMessageType[\"BOT_TTS_TEXT\"] = \"bot-tts-text\";\n    RTVIMessageType[\"BOT_TTS_STARTED\"] = \"bot-tts-started\";\n    RTVIMessageType[\"BOT_TTS_STOPPED\"] = \"bot-tts-stopped\";\n    RTVIMessageType[\"BOT_LLM_SEARCH_RESPONSE\"] = \"bot-llm-search-response\";\n    // Storage\n    RTVIMessageType[\"STORAGE_ITEM_STORED\"] = \"storage-item-stored\";\n    // Server-to-client messages\n    RTVIMessageType[\"SERVER_MESSAGE\"] = \"server-message\";\n})($b48f893ed1354c1e$export$38b3db05cbf0e240 || ($b48f893ed1354c1e$export$38b3db05cbf0e240 = {}));\nclass $b48f893ed1354c1e$export$69aa9ab0334b212 {\n    constructor(type, data, id){\n        this.label = $b48f893ed1354c1e$export$882b13c7fda338f5;\n        this.type = type;\n        this.data = data;\n        this.id = id || (0, uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().slice(0, 8);\n    }\n    // Outbound message types\n    static clientReady() {\n        return new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.CLIENT_READY, {});\n    }\n    static updateConfig(config, interrupt = false) {\n        return new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.UPDATE_CONFIG, {\n            config: config,\n            interrupt: interrupt\n        });\n    }\n    static describeConfig() {\n        return new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.DESCRIBE_CONFIG, {});\n    }\n    static getBotConfig() {\n        return new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.GET_CONFIG, {});\n    }\n    static describeActions() {\n        return new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.DESCRIBE_ACTIONS, {});\n    }\n    static disconnectBot() {\n        return new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.DISCONNECT_BOT, {});\n    }\n    static error(message, fatal = false) {\n        return new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.ERROR, {\n            message: message,\n            fatal: fatal\n        });\n    }\n}\nclass $b48f893ed1354c1e$export$378529d7a8bead8b extends $b48f893ed1354c1e$export$69aa9ab0334b212 {\n    constructor(data){\n        super($b48f893ed1354c1e$export$38b3db05cbf0e240.ACTION, data);\n    }\n}\nclass $b48f893ed1354c1e$export$e9a960646cc432aa {\n    constructor(client){\n        this._queue = new Array();\n        this._gcTime = 10000; // How long to wait before resolving the message\n        this._queue = [];\n        this._client = client;\n    }\n    dispatch(message) {\n        const promise = new Promise((resolve, reject)=>{\n            this._queue.push({\n                message: message,\n                timestamp: Date.now(),\n                resolve: resolve,\n                reject: reject\n            });\n        });\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[MessageDispatcher] dispatch\", message);\n        this._client.sendMessage(message);\n        this._gc();\n        return promise;\n    }\n    async dispatchAction(action, onMessage) {\n        const promise = new Promise((resolve, reject)=>{\n            this._queue.push({\n                message: action,\n                timestamp: Date.now(),\n                resolve: resolve,\n                reject: reject\n            });\n        });\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[MessageDispatcher] action\", action);\n        if (this._client.connected) // Send message to transport when connected\n        this._client.sendMessage(action);\n        else {\n            if (!this._client.params.endpoints?.action) {\n                (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error(\"[MessageDispatcher] Action endpoint is required when dispatching action in disconnected state\");\n                throw new (0, $8ead7b33b8402751$export$be839f0100cd3132)();\n            }\n            const actionUrl = this._client.constructUrl(\"action\");\n            try {\n                // Dispatch action via HTTP when disconnected\n                await (0, $4bb349f22aee5185$export$8728b60ea57bf43e)(actionUrl, action, this._client.params, (response)=>{\n                    onMessage(response);\n                });\n            // On HTTP success (resolve), send `action` message (for callbacks)\n            } catch (e) {\n                onMessage(new $b48f893ed1354c1e$export$69aa9ab0334b212($b48f893ed1354c1e$export$38b3db05cbf0e240.ERROR_RESPONSE, `Action endpoint '${actionUrl}' returned an error response`, action.id));\n            }\n        }\n        this._gc();\n        return promise;\n    }\n    _resolveReject(message, resolve = true) {\n        const queuedMessage = this._queue.find((msg)=>msg.message.id === message.id);\n        if (queuedMessage) {\n            if (resolve) {\n                (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Resolve\", message);\n                queuedMessage.resolve(message.type === $b48f893ed1354c1e$export$38b3db05cbf0e240.ACTION_RESPONSE ? message : message);\n            } else {\n                (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Reject\", message);\n                queuedMessage.reject(message);\n            }\n            // Remove message from queue\n            this._queue = this._queue.filter((msg)=>msg.message.id !== message.id);\n            (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[MessageDispatcher] Queue\", this._queue);\n        }\n        return message;\n    }\n    resolve(message) {\n        return this._resolveReject(message, true);\n    }\n    reject(message) {\n        return this._resolveReject(message, false);\n    }\n    _gc() {\n        this._queue = this._queue.filter((msg)=>{\n            return Date.now() - msg.timestamp < this._gcTime;\n        });\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[MessageDispatcher] GC\", this._queue);\n    }\n}\n\n\nvar $4086f06442fcb7d7$exports = {};\n\n$parcel$export($4086f06442fcb7d7$exports, \"Transport\", () => $4086f06442fcb7d7$export$86495b081fef8e52);\n$parcel$export($4086f06442fcb7d7$exports, \"TransportWrapper\", () => $4086f06442fcb7d7$export$82b6ede160a64a3c);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ class $4086f06442fcb7d7$export$86495b081fef8e52 {\n    constructor(){\n        this._state = \"disconnected\";\n        this._expiry = undefined;\n    }\n    get expiry() {\n        return this._expiry;\n    }\n}\nclass $4086f06442fcb7d7$export$82b6ede160a64a3c {\n    constructor(transport){\n        this._transport = transport;\n        this._proxy = new Proxy(this._transport, {\n            get: (target, prop, receiver)=>{\n                if (typeof target[prop] === \"function\") {\n                    let errMsg;\n                    switch(String(prop)){\n                        // Disable methods that modify the lifecycle of the call. These operations\n                        // should be performed via the RTVI client in order to keep state in sync.\n                        case \"initialize\":\n                            errMsg = `Direct calls to initialize() are disabled and used internally by the RTVIClient.`;\n                            break;\n                        case \"initDevices\":\n                            errMsg = `Direct calls to initDevices() are disabled. Please use the RTVIClient.initDevices() wrapper or let RTVIClient.connect() call it for you.`;\n                            break;\n                        case \"sendReadyMessage\":\n                            errMsg = `Direct calls to sendReadyMessage() are disabled and used internally by the RTVIClient.`;\n                            break;\n                        case \"connect\":\n                            errMsg = `Direct calls to connect() are disabled. Please use the RTVIClient.connect() wrapper.`;\n                            break;\n                        case \"disconnect\":\n                            errMsg = `Direct calls to disconnect() are disabled. Please use the RTVIClient.disconnect() wrapper.`;\n                            break;\n                    }\n                    if (errMsg) return ()=>{\n                        throw new Error(errMsg);\n                    };\n                    // Forward other method calls\n                    return (...args)=>{\n                        return target[prop](...args);\n                    };\n                }\n                // Forward property access\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n    get proxy() {\n        return this._proxy;\n    }\n}\n\n\nvar $a7c324a73303ad55$var$__decorate =  false || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst $a7c324a73303ad55$var$defaultEndpoints = {\n    connect: \"/connect\",\n    action: \"/action\"\n};\nclass $a7c324a73303ad55$var$RTVIEventEmitter extends (0, (events__WEBPACK_IMPORTED_MODULE_1___default())) {\n}\nclass $a7c324a73303ad55$export$fa42a01c1d60f4a1 extends $a7c324a73303ad55$var$RTVIEventEmitter {\n    constructor(options){\n        super();\n        this.params = {\n            ...options.params,\n            endpoints: {\n                ...$a7c324a73303ad55$var$defaultEndpoints,\n                ...options.params.endpoints ?? {}\n            }\n        };\n        this._helpers = {};\n        this._transport = options.transport;\n        this._transportWrapper = new (0, $4086f06442fcb7d7$export$82b6ede160a64a3c)(this._transport);\n        // Wrap transport callbacks with event triggers\n        // This allows for either functional callbacks or .on / .off event listeners\n        const wrappedCallbacks = {\n            ...options.callbacks,\n            onMessageError: (message)=>{\n                options?.callbacks?.onMessageError?.(message);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).MessageError, message);\n            },\n            onError: (message)=>{\n                options?.callbacks?.onError?.(message);\n                try {\n                    this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Error, message);\n                } catch (e) {\n                    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"Could not emit error\", message);\n                }\n                const data = message.data;\n                if (data?.fatal) {\n                    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).error(\"Fatal error reported. Disconnecting...\");\n                    this.disconnect();\n                }\n            },\n            onConnected: ()=>{\n                options?.callbacks?.onConnected?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Connected);\n            },\n            onDisconnected: ()=>{\n                options?.callbacks?.onDisconnected?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Disconnected);\n            },\n            onTransportStateChanged: (state)=>{\n                options?.callbacks?.onTransportStateChanged?.(state);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).TransportStateChanged, state);\n            },\n            onConfig: (config)=>{\n                options?.callbacks?.onConfig?.(config);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Config, config);\n            },\n            onConfigDescribe: (configDescription)=>{\n                options?.callbacks?.onConfigDescribe?.(configDescription);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ConfigDescribe, configDescription);\n            },\n            onActionsAvailable: (actionsAvailable)=>{\n                options?.callbacks?.onActionsAvailable?.(actionsAvailable);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ActionsAvailable, actionsAvailable);\n            },\n            onParticipantJoined: (p)=>{\n                options?.callbacks?.onParticipantJoined?.(p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ParticipantConnected, p);\n            },\n            onParticipantLeft: (p)=>{\n                options?.callbacks?.onParticipantLeft?.(p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ParticipantLeft, p);\n            },\n            onTrackStarted: (track, p)=>{\n                options?.callbacks?.onTrackStarted?.(track, p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).TrackStarted, track, p);\n            },\n            onTrackStopped: (track, p)=>{\n                options?.callbacks?.onTrackStopped?.(track, p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).TrackStopped, track, p);\n            },\n            onScreenTrackStarted: (track, p)=>{\n                options?.callbacks?.onScreenTrackStarted?.(track, p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ScreenTrackStarted, track, p);\n            },\n            onScreenTrackStopped: (track, p)=>{\n                options?.callbacks?.onScreenTrackStopped?.(track, p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ScreenTrackStopped, track, p);\n            },\n            onScreenShareError: (errorMessage)=>{\n                options?.callbacks?.onScreenShareError?.(errorMessage);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ScreenShareError, errorMessage);\n            },\n            onAvailableCamsUpdated: (cams)=>{\n                options?.callbacks?.onAvailableCamsUpdated?.(cams);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).AvailableCamsUpdated, cams);\n            },\n            onAvailableMicsUpdated: (mics)=>{\n                options?.callbacks?.onAvailableMicsUpdated?.(mics);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).AvailableMicsUpdated, mics);\n            },\n            onAvailableSpeakersUpdated: (speakers)=>{\n                options?.callbacks?.onAvailableSpeakersUpdated?.(speakers);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).AvailableSpeakersUpdated, speakers);\n            },\n            onCamUpdated: (cam)=>{\n                options?.callbacks?.onCamUpdated?.(cam);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).CamUpdated, cam);\n            },\n            onMicUpdated: (mic)=>{\n                options?.callbacks?.onMicUpdated?.(mic);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).MicUpdated, mic);\n            },\n            onSpeakerUpdated: (speaker)=>{\n                options?.callbacks?.onSpeakerUpdated?.(speaker);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).SpeakerUpdated, speaker);\n            },\n            onBotConnected: (p)=>{\n                options?.callbacks?.onBotConnected?.(p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotConnected, p);\n            },\n            onBotReady: (botReadyData)=>{\n                options?.callbacks?.onBotReady?.(botReadyData);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotReady, botReadyData);\n            },\n            onBotDisconnected: (p)=>{\n                options?.callbacks?.onBotDisconnected?.(p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotDisconnected, p);\n            },\n            onBotStartedSpeaking: ()=>{\n                options?.callbacks?.onBotStartedSpeaking?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotStartedSpeaking);\n            },\n            onBotStoppedSpeaking: ()=>{\n                options?.callbacks?.onBotStoppedSpeaking?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotStoppedSpeaking);\n            },\n            onRemoteAudioLevel: (level, p)=>{\n                options?.callbacks?.onRemoteAudioLevel?.(level, p);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).RemoteAudioLevel, level, p);\n            },\n            onUserStartedSpeaking: ()=>{\n                options?.callbacks?.onUserStartedSpeaking?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).UserStartedSpeaking);\n            },\n            onUserStoppedSpeaking: ()=>{\n                options?.callbacks?.onUserStoppedSpeaking?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).UserStoppedSpeaking);\n            },\n            onLocalAudioLevel: (level)=>{\n                options?.callbacks?.onLocalAudioLevel?.(level);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).LocalAudioLevel, level);\n            },\n            onUserTranscript: (data)=>{\n                options?.callbacks?.onUserTranscript?.(data);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).UserTranscript, data);\n            },\n            onBotTranscript: (text)=>{\n                options?.callbacks?.onBotTranscript?.(text);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotTranscript, text);\n            },\n            onBotLlmText: (text)=>{\n                options?.callbacks?.onBotLlmText?.(text);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotLlmText, text);\n            },\n            onBotLlmStarted: ()=>{\n                options?.callbacks?.onBotLlmStarted?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotLlmStarted);\n            },\n            onBotLlmStopped: ()=>{\n                options?.callbacks?.onBotLlmStopped?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotLlmStopped);\n            },\n            onBotTtsText: (text)=>{\n                options?.callbacks?.onBotTtsText?.(text);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotTtsText, text);\n            },\n            onBotTtsStarted: ()=>{\n                options?.callbacks?.onBotTtsStarted?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotTtsStarted);\n            },\n            onBotTtsStopped: ()=>{\n                options?.callbacks?.onBotTtsStopped?.();\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotTtsStopped);\n            },\n            onStorageItemStored: (data)=>{\n                options?.callbacks?.onStorageItemStored?.(data);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).StorageItemStored, data);\n            }\n        };\n        // Update options to reference wrapped callbacks and config defaults\n        this._options = {\n            ...options,\n            callbacks: wrappedCallbacks,\n            enableMic: options.enableMic ?? true,\n            enableCam: options.enableCam ?? false\n        };\n        // Instantiate the transport class and bind message handler\n        this._initialize();\n        // Get package version number\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Client] Initialized\", this.version);\n    }\n    constructUrl(endpoint) {\n        if (!this.params.baseUrl) throw new $8ead7b33b8402751$export$59b4786f333aac02(\"Base URL not set. Please set rtviClient.params.baseUrl\");\n        const baseUrl = this.params.baseUrl.replace(/\\/+$/, \"\");\n        return baseUrl + (this.params.endpoints?.[endpoint] ?? \"\");\n    }\n    setLogLevel(level) {\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).setLevel(level);\n    }\n    // ------ Transport methods\n    /**\n     * Initialize local media devices\n     */ async initDevices() {\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Client] Initializing devices...\");\n        await this._transport.initDevices();\n    }\n    /**\n     * Connect the voice client session with chosen transport\n     * Call async (await) to handle errors\n     */ async connect() {\n        if ([\n            \"authenticating\",\n            \"connecting\",\n            \"connected\",\n            \"ready\"\n        ].includes(this._transport.state)) throw new $8ead7b33b8402751$export$59b4786f333aac02(\"Voice client has already been started. Please call disconnect() before starting again.\");\n        this._abortController = new AbortController();\n        // Establish transport session and await bot ready signal\n        return new Promise((resolve, reject)=>{\n            (async ()=>{\n                this._startResolve = resolve;\n                if (this._transport.state === \"disconnected\") await this._transport.initDevices();\n                this._transport.state = \"authenticating\";\n                // Set a timer for the bot to enter a ready state, otherwise abort the attempt\n                if (this._options.timeout) this._handshakeTimeout = setTimeout(async ()=>{\n                    this._abortController?.abort();\n                    await this.disconnect();\n                    this._transport.state = \"error\";\n                    reject(new $8ead7b33b8402751$export$c67992fa684a81a6());\n                }, this._options.timeout);\n                let authBundle;\n                const customConnectHandler = this._options.customConnectHandler;\n                (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Client] Start params\", this.params);\n                this.params = {\n                    ...this.params,\n                    requestData: {\n                        ...this.params.requestData,\n                        rtvi_client_version: this.version\n                    }\n                };\n                if (!this.params.baseUrl && !this.params.endpoints?.connect) {\n                    // If baseUrl and endpoints.connect are not set, bypass the handshake and connect directly\n                    // This is useful with transports that do not require service side auth, especially in local development\n                    // Note: this is not recommended for production use, see [docs link]\n                    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Client] Connecting directly (skipping handshake / auth)...\");\n                    clearTimeout(this._handshakeTimeout);\n                } else {\n                    const connectUrl = this.constructUrl(\"connect\");\n                    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Client] Connecting...\", connectUrl);\n                    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Client] Start params\", this.params);\n                    try {\n                        if (customConnectHandler) authBundle = await customConnectHandler(this.params, this._handshakeTimeout, this._abortController);\n                        else authBundle = await fetch(connectUrl, {\n                            method: \"POST\",\n                            mode: \"cors\",\n                            headers: new Headers({\n                                \"Content-Type\": \"application/json\",\n                                ...Object.fromEntries((this.params.headers ?? new Headers()).entries())\n                            }),\n                            body: JSON.stringify({\n                                config: this.params.config,\n                                ...this.params.services ? {\n                                    services: this.params.services\n                                } : {},\n                                ...this.params.requestData\n                            }),\n                            signal: this._abortController?.signal\n                        }).then((res)=>{\n                            clearTimeout(this._handshakeTimeout);\n                            if (res.ok) return res.json();\n                            return Promise.reject(res);\n                        });\n                    } catch (e) {\n                        clearTimeout(this._handshakeTimeout);\n                        // Handle errors if the request was not aborted\n                        if (this._abortController?.signal.aborted) return;\n                        this._transport.state = \"error\";\n                        if (e instanceof Response) {\n                            const errorResp = await e.json();\n                            reject(new $8ead7b33b8402751$export$e7544ab812238a61(errorResp.info ?? errorResp.detail ?? e.statusText, e.status));\n                        } else reject(new $8ead7b33b8402751$export$e7544ab812238a61());\n                        return;\n                    }\n                    (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Client] Auth bundle received\", authBundle);\n                }\n                try {\n                    await this._transport.connect(authBundle, this._abortController);\n                    await this._transport.sendReadyMessage();\n                } catch (e) {\n                    clearTimeout(this._handshakeTimeout);\n                    this.disconnect();\n                    reject(e);\n                    return;\n                }\n            })();\n        });\n    }\n    /**\n     * Disconnect the voice client from the transport\n     * Reset / reinitialize transport and abort any pending requests\n     */ async disconnect() {\n        if (this._abortController) this._abortController.abort();\n        clearTimeout(this._handshakeTimeout);\n        await this._transport.disconnect();\n        this._messageDispatcher = new (0, $b48f893ed1354c1e$export$e9a960646cc432aa)(this);\n    }\n    _initialize() {\n        this._transport.initialize(this._options, this.handleMessage.bind(this));\n        // Create a new message dispatch queue for async message handling\n        this._messageDispatcher = new (0, $b48f893ed1354c1e$export$e9a960646cc432aa)(this);\n    }\n    /**\n     * Get the current state of the transport\n     */ get connected() {\n        return [\n            \"connected\",\n            \"ready\"\n        ].includes(this._transport.state);\n    }\n    get transport() {\n        return this._transportWrapper.proxy;\n    }\n    get state() {\n        return this._transport.state;\n    }\n    get version() {\n        return (0, (/*@__PURE__*/$parcel$interopDefault($e3bad9cc25e327f7$exports))).version;\n    }\n    // ------ Device methods\n    async getAllMics() {\n        return await this._transport.getAllMics();\n    }\n    async getAllCams() {\n        return await this._transport.getAllCams();\n    }\n    async getAllSpeakers() {\n        return await this._transport.getAllSpeakers();\n    }\n    get selectedMic() {\n        return this._transport.selectedMic;\n    }\n    get selectedCam() {\n        return this._transport.selectedCam;\n    }\n    get selectedSpeaker() {\n        return this._transport.selectedSpeaker;\n    }\n    updateMic(micId) {\n        this._transport.updateMic(micId);\n    }\n    updateCam(camId) {\n        this._transport.updateCam(camId);\n    }\n    updateSpeaker(speakerId) {\n        this._transport.updateSpeaker(speakerId);\n    }\n    enableMic(enable) {\n        this._transport.enableMic(enable);\n    }\n    get isMicEnabled() {\n        return this._transport.isMicEnabled;\n    }\n    enableCam(enable) {\n        this._transport.enableCam(enable);\n    }\n    get isCamEnabled() {\n        return this._transport.isCamEnabled;\n    }\n    tracks() {\n        return this._transport.tracks();\n    }\n    enableScreenShare(enable) {\n        return this._transport.enableScreenShare(enable);\n    }\n    get isSharingScreen() {\n        return this._transport.isSharingScreen;\n    }\n    // ------ Config methods\n    /**\n     * Request the bot to send the current configuration\n     * @returns Promise<RTVIClientConfigOption[]> - Promise that resolves with the bot's configuration\n     */ async getConfig() {\n        const configMsg = await this._messageDispatcher.dispatch((0, $b48f893ed1354c1e$export$69aa9ab0334b212).getBotConfig());\n        return configMsg.data.config;\n    }\n    /**\n     * Update pipeline and services\n     * @param config - RTVIClientConfigOption[] partial object with the new configuration\n     * @param interrupt - boolean flag to interrupt the current pipeline, or wait until the next turn\n     * @returns Promise<RTVIMessage> - Promise that resolves with the updated configuration\n     */ async updateConfig(config, interrupt = false) {\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Client] Updating config\", config);\n        // Only send the partial config if the bot is ready to prevent\n        // potential racing conditions whilst pipeline is instantiating\n        return this._messageDispatcher.dispatch((0, $b48f893ed1354c1e$export$69aa9ab0334b212).updateConfig(config, interrupt));\n    }\n    /**\n     * Request bot describe the current configuration options\n     * @returns Promise<unknown> - Promise that resolves with the bot's configuration description\n     */ async describeConfig() {\n        return this._messageDispatcher.dispatch((0, $b48f893ed1354c1e$export$69aa9ab0334b212).describeConfig());\n    }\n    /**\n     * Returns configuration options for specified service key\n     * @param serviceKey - Service name to get options for (e.g. \"llm\")\n     * @param config? - Optional RTVIClientConfigOption[] to query (vs. using remote config)\n     * @returns RTVIClientConfigOption | undefined - Configuration options array for the service with specified key or undefined\n     */ async getServiceOptionsFromConfig(serviceKey, config) {\n        if (!config && this.state !== \"ready\") throw new $8ead7b33b8402751$export$885fb96b850e8fbb(\"getServiceOptionsFromConfig called without config array before bot is ready\");\n        return Promise.resolve().then(async ()=>{\n            // Check if we have registered service with name service\n            if (!serviceKey) {\n                (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"Target service name is required\");\n                return undefined;\n            }\n            const passedConfig = config ?? await this.getConfig();\n            // Find matching service name in the config and update the messages\n            const configServiceKey = passedConfig.find((config)=>config.service === serviceKey);\n            if (!configServiceKey) {\n                (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"No service with name \" + serviceKey + \" not found in config\");\n                return undefined;\n            }\n            // Return a new object, as to not mutate existing state\n            return configServiceKey;\n        });\n    }\n    /**\n     * Returns configuration option value (unknown) for specified service key and option name\n     * @param serviceKey - Service name to get options for (e.g. \"llm\")\n     * @optional option Name of option return from the config (e.g. \"model\")\n     * @returns Promise<unknown | undefined> - Service configuration option value or undefined\n     */ async getServiceOptionValueFromConfig(serviceKey, option, config) {\n        const configServiceKey = await this.getServiceOptionsFromConfig(serviceKey, config);\n        if (!configServiceKey) {\n            (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"Service with name \" + serviceKey + \" not found in config\");\n            return undefined;\n        }\n        // Find matching option key in the service config\n        const optionValue = configServiceKey.options.find((o)=>o.name === option);\n        return optionValue ? optionValue.value : undefined;\n    }\n    _updateOrAddOption(existingOptions, newOption) {\n        const existingOptionIndex = existingOptions.findIndex((item)=>item.name === newOption.name);\n        if (existingOptionIndex !== -1) // Update existing option\n        return existingOptions.map((item, index)=>index === existingOptionIndex ? {\n                ...item,\n                value: newOption.value\n            } : item);\n        else // Add new option\n        return [\n            ...existingOptions,\n            {\n                name: newOption.name,\n                value: newOption.value\n            }\n        ];\n    }\n    /**\n     * Returns config with updated option(s) for specified service key and option name\n     * Note: does not update current config, only returns a new object (call updateConfig to apply changes)\n     * @param serviceKey - Service name to get options for (e.g. \"llm\")\n     * @param option - Service name to get options for (e.g. \"model\")\n     * @param config - Optional RTVIClientConfigOption[] to update (vs. using current config)\n     * @returns Promise<RTVIClientConfigOption[] | undefined> - Configuration options array with updated option(s) or undefined\n     */ async setServiceOptionInConfig(serviceKey, option, config) {\n        const newConfig = (0, (clone_deep__WEBPACK_IMPORTED_MODULE_0___default()))(config ?? await this.getConfig());\n        const serviceOptions = await this.getServiceOptionsFromConfig(serviceKey, newConfig);\n        if (!serviceOptions) {\n            (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"Service with name '\" + serviceKey + \"' not found in config\");\n            return newConfig;\n        }\n        const optionsArray = Array.isArray(option) ? option : [\n            option\n        ];\n        for (const opt of optionsArray){\n            const existingItem = newConfig.find((item)=>item.service === serviceKey);\n            const updatedOptions = existingItem ? this._updateOrAddOption(existingItem.options, opt) : [\n                {\n                    name: opt.name,\n                    value: opt.value\n                }\n            ];\n            if (existingItem) existingItem.options = updatedOptions;\n            else newConfig.push({\n                service: serviceKey,\n                options: updatedOptions\n            });\n        }\n        return newConfig;\n    }\n    /**\n     * Returns config object with updated properties from passed array.\n     * @param configOptions - Array of RTVIClientConfigOption[] to update\n     * @param config? - Optional RTVIClientConfigOption[] to update (vs. using current config)\n     * @returns Promise<RTVIClientConfigOption[]> - Configuration options\n     */ async setConfigOptions(configOptions, config) {\n        let accumulator = (0, (clone_deep__WEBPACK_IMPORTED_MODULE_0___default()))(config ?? await this.getConfig());\n        for (const configOption of configOptions)accumulator = await this.setServiceOptionInConfig(configOption.service, configOption.options, accumulator) || accumulator;\n        return accumulator;\n    }\n    // ------ Actions\n    /**\n     * Dispatch an action message to the bot or http single-turn endpoint\n     */ async action(action) {\n        return this._messageDispatcher.dispatchAction(new (0, $b48f893ed1354c1e$export$378529d7a8bead8b)(action), this.handleMessage.bind(this));\n    }\n    /**\n     * Describe available / registered actions the bot has\n     * @returns Promise<unknown> - Promise that resolves with the bot's actions\n     */ async describeActions() {\n        return this._messageDispatcher.dispatch((0, $b48f893ed1354c1e$export$69aa9ab0334b212).describeActions());\n    }\n    // ------ Transport methods\n    /**\n     * Get the session expiry time for the transport session (if applicable)\n     * @returns number - Expiry time in milliseconds\n     */ get transportExpiry() {\n        return this._transport.expiry;\n    }\n    // ------ Messages\n    /**\n     * Directly send a message to the bot via the transport\n     * @param message - RTVIMessage object to send\n     */ sendMessage(message) {\n        this._transport.sendMessage(message);\n    }\n    /**\n     * Disconnects the bot, but keeps the session alive\n     */ disconnectBot() {\n        this._transport.sendMessage(new (0, $b48f893ed1354c1e$export$69aa9ab0334b212)((0, $b48f893ed1354c1e$export$38b3db05cbf0e240).DISCONNECT_BOT, {}));\n    }\n    handleMessage(ev) {\n        (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(\"[RTVI Message]\", ev);\n        switch(ev.type){\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_READY:\n                clearTimeout(this._handshakeTimeout);\n                this._startResolve?.(ev.data);\n                this._options.callbacks?.onBotReady?.(ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).CONFIG_AVAILABLE:\n                this._messageDispatcher.resolve(ev);\n                this._options.callbacks?.onConfigDescribe?.(ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).CONFIG:\n                {\n                    const resp = this._messageDispatcher.resolve(ev);\n                    this._options.callbacks?.onConfig?.(resp.data.config);\n                    break;\n                }\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).ACTIONS_AVAILABLE:\n                this._messageDispatcher.resolve(ev);\n                this._options.callbacks?.onActionsAvailable?.(ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).ACTION_RESPONSE:\n                this._messageDispatcher.resolve(ev);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).ERROR_RESPONSE:\n                {\n                    const resp = this._messageDispatcher.reject(ev);\n                    this._options.callbacks?.onMessageError?.(resp);\n                    break;\n                }\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).ERROR:\n                this._options.callbacks?.onError?.(ev);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).USER_STARTED_SPEAKING:\n                this._options.callbacks?.onUserStartedSpeaking?.();\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).USER_STOPPED_SPEAKING:\n                this._options.callbacks?.onUserStoppedSpeaking?.();\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_STARTED_SPEAKING:\n                this._options.callbacks?.onBotStartedSpeaking?.();\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_STOPPED_SPEAKING:\n                this._options.callbacks?.onBotStoppedSpeaking?.();\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).USER_TRANSCRIPTION:\n                {\n                    const TranscriptData = ev.data;\n                    this._options.callbacks?.onUserTranscript?.(TranscriptData);\n                    break;\n                }\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_TRANSCRIPTION:\n                this._options.callbacks?.onBotTranscript?.(ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_LLM_TEXT:\n                this._options.callbacks?.onBotLlmText?.(ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_LLM_STARTED:\n                this._options.callbacks?.onBotLlmStarted?.();\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_LLM_STOPPED:\n                this._options.callbacks?.onBotLlmStopped?.();\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_TTS_TEXT:\n                this._options.callbacks?.onBotTtsText?.(ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_TTS_STARTED:\n                this._options.callbacks?.onBotTtsStarted?.();\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_TTS_STOPPED:\n                this._options.callbacks?.onBotTtsStopped?.();\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).BOT_LLM_SEARCH_RESPONSE:\n                this._options.callbacks?.onBotLlmSearchResponse?.(ev.data);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).BotLlmSearchResponse, ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).METRICS:\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).Metrics, ev.data);\n                this._options.callbacks?.onMetrics?.(ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).STORAGE_ITEM_STORED:\n                this._options.callbacks?.onStorageItemStored?.(ev.data);\n                break;\n            case (0, $b48f893ed1354c1e$export$38b3db05cbf0e240).SERVER_MESSAGE:\n                this._options.callbacks?.onServerMessage?.(ev.data);\n                this.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).ServerMessage, ev.data);\n                break;\n            default:\n                {\n                    let match = false;\n                    // Pass message to registered helpers\n                    for (const helper of Object.values(this._helpers))if (helper.getMessageTypes().includes(ev.type)) {\n                        match = true;\n                        helper.handleMessage(ev);\n                    }\n                    if (!match) this._options.callbacks?.onGenericMessage?.(ev.data);\n                }\n        }\n    }\n    // ------ Helpers\n    /**\n     * Register a new helper to the client\n     * This (optionally) provides a way to reference helpers directly\n     * from the client and use the event dispatcher\n     * @param service - Target service for this helper\n     * @param helper - Helper instance\n     * @returns RTVIClientHelper - Registered helper instance\n     */ registerHelper(service, helper) {\n        if (this._helpers[service]) throw new Error(`Helper with name '${service}' already registered`);\n        // Check helper is instance of RTVIClientHelper\n        if (!(helper instanceof (0, $7614fb2168c523cc$export$23bc637255b2a471))) throw new Error(`Helper must be an instance of RTVIClientHelper`);\n        helper.service = service;\n        helper.client = this;\n        this._helpers[service] = helper;\n        return this._helpers[service];\n    }\n    getHelper(service) {\n        const helper = this._helpers[service];\n        if (!helper) {\n            (0, $7afbbd59ebaa42bf$export$af88d00dbe7f521).debug(`Helper targeting service '${service}' not found`);\n            return undefined;\n        }\n        return helper;\n    }\n    unregisterHelper(service) {\n        if (!this._helpers[service]) return;\n        delete this._helpers[service];\n    }\n}\n$a7c324a73303ad55$var$__decorate([\n    (0, $16f019d4d16917df$export$f1586721024c4dab)\n], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, \"getConfig\", null);\n$a7c324a73303ad55$var$__decorate([\n    (0, $16f019d4d16917df$export$f1586721024c4dab)\n], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, \"updateConfig\", null);\n$a7c324a73303ad55$var$__decorate([\n    (0, $16f019d4d16917df$export$f1586721024c4dab)\n], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, \"describeConfig\", null);\n$a7c324a73303ad55$var$__decorate([\n    (0, $16f019d4d16917df$export$f1586721024c4dab)\n], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, \"describeActions\", null);\n$a7c324a73303ad55$var$__decorate([\n    (0, $16f019d4d16917df$export$5c35b4fe6fa8c9a6)(\"connected\", \"ready\")\n], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, \"transportExpiry\", null);\n$a7c324a73303ad55$var$__decorate([\n    (0, $16f019d4d16917df$export$f1586721024c4dab)\n], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, \"sendMessage\", null);\n$a7c324a73303ad55$var$__decorate([\n    (0, $16f019d4d16917df$export$f1586721024c4dab)\n], $a7c324a73303ad55$export$fa42a01c1d60f4a1.prototype, \"disconnectBot\", null);\n\n\n\n\n\nvar $0908f693e3e0724c$exports = {};\n\n$parcel$export($0908f693e3e0724c$exports, \"LLMMessageType\", () => $0908f693e3e0724c$export$441bcd2e10762760);\n$parcel$export($0908f693e3e0724c$exports, \"LLMActionType\", () => $0908f693e3e0724c$export$43cdfb26f790451);\n$parcel$export($0908f693e3e0724c$exports, \"LLMHelper\", () => $0908f693e3e0724c$export$3cf39a62d076dd5c);\n/**\n * Copyright (c) 2024, Daily.\n *\n * SPDX-License-Identifier: BSD-2-Clause\n */ \n\n\n\nvar $0908f693e3e0724c$export$441bcd2e10762760;\n(function(LLMMessageType) {\n    LLMMessageType[\"LLM_FUNCTION_CALL\"] = \"llm-function-call\";\n    LLMMessageType[\"LLM_FUNCTION_CALL_START\"] = \"llm-function-call-start\";\n    LLMMessageType[\"LLM_FUNCTION_CALL_RESULT\"] = \"llm-function-call-result\";\n    LLMMessageType[\"LLM_JSON_COMPLETION\"] = \"llm-json-completion\";\n})($0908f693e3e0724c$export$441bcd2e10762760 || ($0908f693e3e0724c$export$441bcd2e10762760 = {}));\nvar $0908f693e3e0724c$export$43cdfb26f790451;\n(function(LLMActionType) {\n    LLMActionType[\"APPEND_TO_MESSAGES\"] = \"append_to_messages\";\n    LLMActionType[\"GET_CONTEXT\"] = \"get_context\";\n    LLMActionType[\"SET_CONTEXT\"] = \"set_context\";\n    LLMActionType[\"RUN\"] = \"run\";\n})($0908f693e3e0724c$export$43cdfb26f790451 || ($0908f693e3e0724c$export$43cdfb26f790451 = {}));\nclass $0908f693e3e0724c$export$3cf39a62d076dd5c extends (0, $7614fb2168c523cc$export$23bc637255b2a471) {\n    constructor(options){\n        super(options);\n        this._functionCallCallback = null;\n    }\n    getMessageTypes() {\n        return Object.values($0908f693e3e0724c$export$441bcd2e10762760);\n    }\n    // --- Actions\n    /**\n     * Retrieve the bot's current LLM context.\n     * @returns Promise<LLMContext>\n     */ async getContext() {\n        if (this._client.state !== \"ready\") throw new $8ead7b33b8402751$export$885fb96b850e8fbb(\"getContext called while transport not in ready state\");\n        const actionResponseMsg = await this._client.action({\n            service: this._service,\n            action: $0908f693e3e0724c$export$43cdfb26f790451.GET_CONTEXT\n        });\n        return actionResponseMsg.data.result;\n    }\n    /**\n     * Update the bot's LLM context.\n     * If this is called while the transport is not in the ready state, the local context will be updated\n     * @param context LLMContext - The new context\n     * @param interrupt boolean - Whether to interrupt the bot, or wait until it has finished speaking\n     * @returns Promise<boolean>\n     */ async setContext(context, interrupt = false) {\n        if (this._client.state !== \"ready\") throw new $8ead7b33b8402751$export$885fb96b850e8fbb(\"setContext called while transport not in ready state\");\n        const actionResponse = await this._client.action({\n            service: this._service,\n            action: $0908f693e3e0724c$export$43cdfb26f790451.SET_CONTEXT,\n            arguments: [\n                {\n                    name: \"messages\",\n                    value: context.messages\n                },\n                {\n                    name: \"interrupt\",\n                    value: interrupt\n                }\n            ]\n        });\n        return !!actionResponse.data.result;\n    }\n    /**\n     * Append a new message to the LLM context.\n     * If this is called while the transport is not in the ready state, the local context will be updated\n     * @param context LLMContextMessage\n     * @param runImmediately boolean - wait until pipeline is idle before running\n     * @returns boolean\n     */ async appendToMessages(message, runImmediately = false) {\n        if (this._client.state !== \"ready\") throw new $8ead7b33b8402751$export$885fb96b850e8fbb(\"setContext called while transport not in ready state\");\n        const actionResponse = await this._client.action({\n            service: this._service,\n            action: $0908f693e3e0724c$export$43cdfb26f790451.APPEND_TO_MESSAGES,\n            arguments: [\n                {\n                    name: \"messages\",\n                    value: [\n                        message\n                    ]\n                },\n                {\n                    name: \"run_immediately\",\n                    value: runImmediately\n                }\n            ]\n        });\n        return !!actionResponse.data.result;\n    }\n    /**\n     * Run the bot's current LLM context.\n     * Useful when appending messages to the context without runImmediately set to true.\n     * Will do nothing if the bot is not in the ready state.\n     * @param interrupt boolean - Whether to interrupt the bot, or wait until it has finished speaking\n     * @returns Promise<unknown>\n     */ async run(interrupt = false) {\n        if (this._client.state !== \"ready\") return;\n        return this._client.action({\n            service: this._service,\n            action: $0908f693e3e0724c$export$43cdfb26f790451.RUN,\n            arguments: [\n                {\n                    name: \"interrupt\",\n                    value: interrupt\n                }\n            ]\n        });\n    }\n    // --- Handlers\n    /**\n     * If the LLM wants to call a function, RTVI will invoke the callback defined\n     * here. Whatever the callback returns will be sent to the LLM as the function result.\n     * @param callback\n     * @returns void\n     */ handleFunctionCall(callback) {\n        this._functionCallCallback = callback;\n    }\n    handleMessage(ev) {\n        switch(ev.type){\n            case $0908f693e3e0724c$export$441bcd2e10762760.LLM_JSON_COMPLETION:\n                this._options.callbacks?.onLLMJsonCompletion?.(ev.data);\n                this._client.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).LLMJsonCompletion, ev.data);\n                break;\n            case $0908f693e3e0724c$export$441bcd2e10762760.LLM_FUNCTION_CALL:\n                {\n                    const d = ev.data;\n                    this._options.callbacks?.onLLMFunctionCall?.(ev.data);\n                    this._client.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).LLMFunctionCall, ev.data);\n                    if (this._functionCallCallback) {\n                        const fn = {\n                            functionName: d.function_name,\n                            arguments: d.args\n                        };\n                        if (this._client.state === \"ready\") this._functionCallCallback(fn).then((result)=>{\n                            this._client.sendMessage(new (0, $b48f893ed1354c1e$export$69aa9ab0334b212)($0908f693e3e0724c$export$441bcd2e10762760.LLM_FUNCTION_CALL_RESULT, {\n                                function_name: d.function_name,\n                                tool_call_id: d.tool_call_id,\n                                arguments: d.args,\n                                result: result\n                            }));\n                        });\n                        else throw new $8ead7b33b8402751$export$885fb96b850e8fbb(\"Attempted to send a function call result from bot while transport not in ready state\");\n                    }\n                    break;\n                }\n            case $0908f693e3e0724c$export$441bcd2e10762760.LLM_FUNCTION_CALL_START:\n                {\n                    const e = ev.data;\n                    this._options.callbacks?.onLLMFunctionCallStart?.(e.function_name);\n                    this._client.emit((0, $f9fc0c57b9aaed9c$export$6b4624d233c61fcb).LLMFunctionCallStart, e.function_name);\n                    break;\n                }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@pipecat-ai/client-js/dist/index.module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@pipecat-ai/websocket-transport/dist/index.module.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@pipecat-ai/websocket-transport/dist/index.module.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DailyMediaManager: () => (/* binding */ $22ece045290c996a$export$c95c65abc5f47125),\n/* harmony export */   ProtobufFrameSerializer: () => (/* binding */ $a6c080dc51c9687f$export$4b2026f8e11b148a),\n/* harmony export */   TwilioSerializer: () => (/* binding */ $5b926fa33e35e45c$export$44a8a077420336af),\n/* harmony export */   WavMediaManager: () => (/* binding */ $fc49a56cd8739127$export$45c5b9bfba2f6304),\n/* harmony export */   WebSocketTransport: () => (/* binding */ $7f42eda74f1b1632$export$de21836fc42c6f9c)\n/* harmony export */ });\n/* harmony import */ var _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daily-co/daily-js */ \"(ssr)/./node_modules/@daily-co/daily-js/dist/daily-esm.js\");\n/* harmony import */ var _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pipecat-ai/client-js */ \"(ssr)/./node_modules/@pipecat-ai/client-js/dist/index.module.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/message-type.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js\");\n/* harmony import */ var x_law__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! x-law */ \"(ssr)/./node_modules/x-law/dist/index.js\");\n\n\n\n\n\n\n// export * from \"./realTimeWebSocketTransport\";\n// export * from \"../../../lib/wavtools/dist/index.d.ts\";\n/**\n * Raw wav audio file contents\n * @typedef {Object} WavPackerAudioType\n * @property {Blob} blob\n * @property {string} url\n * @property {number} channelCount\n * @property {number} sampleRate\n * @property {number} duration\n */ /**\n * Utility class for assembling PCM16 \"audio/wav\" data\n * @class\n */ class $6d4b7449a1e1544a$export$13afda237b1c9846 {\n    /**\n   * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format\n   * @param {Float32Array} float32Array\n   * @returns {ArrayBuffer}\n   */ static floatTo16BitPCM(float32Array) {\n        const buffer = new ArrayBuffer(float32Array.length * 2);\n        const view = new DataView(buffer);\n        let offset = 0;\n        for(let i = 0; i < float32Array.length; i++, offset += 2){\n            let s = Math.max(-1, Math.min(1, float32Array[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n        }\n        return buffer;\n    }\n    /**\n   * Concatenates two ArrayBuffers\n   * @param {ArrayBuffer} leftBuffer\n   * @param {ArrayBuffer} rightBuffer\n   * @returns {ArrayBuffer}\n   */ static mergeBuffers(leftBuffer, rightBuffer) {\n        const tmpArray = new Uint8Array(leftBuffer.byteLength + rightBuffer.byteLength);\n        tmpArray.set(new Uint8Array(leftBuffer), 0);\n        tmpArray.set(new Uint8Array(rightBuffer), leftBuffer.byteLength);\n        return tmpArray.buffer;\n    }\n    /**\n   * Packs data into an Int16 format\n   * @private\n   * @param {number} size 0 = 1x Int16, 1 = 2x Int16\n   * @param {number} arg value to pack\n   * @returns\n   */ _packData(size, arg) {\n        return [\n            new Uint8Array([\n                arg,\n                arg >> 8\n            ]),\n            new Uint8Array([\n                arg,\n                arg >> 8,\n                arg >> 16,\n                arg >> 24\n            ])\n        ][size];\n    }\n    /**\n   * Packs audio into \"audio/wav\" Blob\n   * @param {number} sampleRate\n   * @param {{bitsPerSample: number, channels: Array<Float32Array>, data: Int16Array}} audio\n   * @returns {WavPackerAudioType}\n   */ pack(sampleRate, audio) {\n        if (!audio?.bitsPerSample) throw new Error(`Missing \"bitsPerSample\"`);\n        else if (!audio?.channels) throw new Error(`Missing \"channels\"`);\n        else if (!audio?.data) throw new Error(`Missing \"data\"`);\n        const { bitsPerSample: bitsPerSample, channels: channels, data: data } = audio;\n        const output = [\n            // Header\n            'RIFF',\n            this._packData(1, 52),\n            'WAVE',\n            // chunk 1\n            'fmt ',\n            this._packData(1, 16),\n            this._packData(0, 1),\n            this._packData(0, channels.length),\n            this._packData(1, sampleRate),\n            this._packData(1, sampleRate * channels.length * bitsPerSample / 8),\n            this._packData(0, channels.length * bitsPerSample / 8),\n            this._packData(0, bitsPerSample),\n            // chunk 2\n            'data',\n            this._packData(1, channels[0].length * channels.length * bitsPerSample / 8),\n            data\n        ];\n        const blob = new Blob(output, {\n            type: 'audio/mpeg'\n        });\n        const url = URL.createObjectURL(blob);\n        return {\n            blob: blob,\n            url: url,\n            channelCount: channels.length,\n            sampleRate: sampleRate,\n            duration: data.byteLength / (channels.length * sampleRate * 2)\n        };\n    }\n}\nglobalThis.WavPacker = $6d4b7449a1e1544a$export$13afda237b1c9846;\n\n\n/**\n * Constants for help with visualization\n * Helps map frequency ranges from Fast Fourier Transform\n * to human-interpretable ranges, notably music ranges and\n * human vocal ranges.\n */ // Eighth octave frequencies\nconst $03f71ce85e00ada6$var$octave8Frequencies = [\n    4186.01,\n    4434.92,\n    4698.63,\n    4978.03,\n    5274.04,\n    5587.65,\n    5919.91,\n    6271.93,\n    6644.88,\n    7040.0,\n    7458.62,\n    7902.13\n];\n// Labels for each of the above frequencies\nconst $03f71ce85e00ada6$var$octave8FrequencyLabels = [\n    'C',\n    'C#',\n    'D',\n    'D#',\n    'E',\n    'F',\n    'F#',\n    'G',\n    'G#',\n    'A',\n    'A#',\n    'B'\n];\nconst $03f71ce85e00ada6$export$776c63898ae5b636 = [];\nconst $03f71ce85e00ada6$export$facd167cc27ea9b0 = [];\nfor(let i = 1; i <= 8; i++)for(let f = 0; f < $03f71ce85e00ada6$var$octave8Frequencies.length; f++){\n    const freq = $03f71ce85e00ada6$var$octave8Frequencies[f];\n    $03f71ce85e00ada6$export$776c63898ae5b636.push(freq / Math.pow(2, 8 - i));\n    $03f71ce85e00ada6$export$facd167cc27ea9b0.push($03f71ce85e00ada6$var$octave8FrequencyLabels[f] + i);\n}\n/**\n * Subset of the note frequencies between 32 and 2000 Hz\n * 6 octave range: C1 to B6\n */ const $03f71ce85e00ada6$var$voiceFrequencyRange = [\n    32.0,\n    2000.0\n];\nconst $03f71ce85e00ada6$export$dbc1581ed2cfa183 = $03f71ce85e00ada6$export$776c63898ae5b636.filter((_, i)=>{\n    return $03f71ce85e00ada6$export$776c63898ae5b636[i] > $03f71ce85e00ada6$var$voiceFrequencyRange[0] && $03f71ce85e00ada6$export$776c63898ae5b636[i] < $03f71ce85e00ada6$var$voiceFrequencyRange[1];\n});\nconst $03f71ce85e00ada6$export$30a6f2881311088f = $03f71ce85e00ada6$export$facd167cc27ea9b0.filter((_, i)=>{\n    return $03f71ce85e00ada6$export$776c63898ae5b636[i] > $03f71ce85e00ada6$var$voiceFrequencyRange[0] && $03f71ce85e00ada6$export$776c63898ae5b636[i] < $03f71ce85e00ada6$var$voiceFrequencyRange[1];\n});\n\n\nclass $f32f064564ee62f6$export$2c3136da0bf130f9 {\n    /**\n   * Retrieves frequency domain data from an AnalyserNode adjusted to a decibel range\n   * returns human-readable formatting and labels\n   * @param {AnalyserNode} analyser\n   * @param {number} sampleRate\n   * @param {Float32Array} [fftResult]\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {AudioAnalysisOutputType}\n   */ static getFrequencies(analyser, sampleRate, fftResult, analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        if (!fftResult) {\n            fftResult = new Float32Array(analyser.frequencyBinCount);\n            analyser.getFloatFrequencyData(fftResult);\n        }\n        const nyquistFrequency = sampleRate / 2;\n        const frequencyStep = 1 / fftResult.length * nyquistFrequency;\n        let outputValues;\n        let frequencies;\n        let labels;\n        if (analysisType === 'music' || analysisType === 'voice') {\n            const useFrequencies = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa183) : (0, $03f71ce85e00ada6$export$776c63898ae5b636);\n            const aggregateOutput = Array(useFrequencies.length).fill(minDecibels);\n            for(let i = 0; i < fftResult.length; i++){\n                const frequency = i * frequencyStep;\n                const amplitude = fftResult[i];\n                for(let n = useFrequencies.length - 1; n >= 0; n--)if (frequency > useFrequencies[n]) {\n                    aggregateOutput[n] = Math.max(aggregateOutput[n], amplitude);\n                    break;\n                }\n            }\n            outputValues = aggregateOutput;\n            frequencies = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$dbc1581ed2cfa183) : (0, $03f71ce85e00ada6$export$776c63898ae5b636);\n            labels = analysisType === 'voice' ? (0, $03f71ce85e00ada6$export$30a6f2881311088f) : (0, $03f71ce85e00ada6$export$facd167cc27ea9b0);\n        } else {\n            outputValues = Array.from(fftResult);\n            frequencies = outputValues.map((_, i)=>frequencyStep * i);\n            labels = frequencies.map((f)=>`${f.toFixed(2)} Hz`);\n        }\n        // We normalize to {0, 1}\n        const normalizedOutput = outputValues.map((v)=>{\n            return Math.max(0, Math.min((v - minDecibels) / (maxDecibels - minDecibels), 1));\n        });\n        const values = new Float32Array(normalizedOutput);\n        return {\n            values: values,\n            frequencies: frequencies,\n            labels: labels\n        };\n    }\n    /**\n   * Creates a new AudioAnalysis instance for an HTMLAudioElement\n   * @param {HTMLAudioElement} audioElement\n   * @param {AudioBuffer|null} [audioBuffer] If provided, will cache all frequency domain data from the buffer\n   * @returns {AudioAnalysis}\n   */ constructor(audioElement, audioBuffer = null){\n        this.fftResults = [];\n        if (audioBuffer) {\n            /**\n       * Modified from\n       * https://stackoverflow.com/questions/75063715/using-the-web-audio-api-to-analyze-a-song-without-playing\n       *\n       * We do this to populate FFT values for the audio if provided an `audioBuffer`\n       * The reason to do this is that Safari fails when using `createMediaElementSource`\n       * This has a non-zero RAM cost so we only opt-in to run it on Safari, Chrome is better\n       */ const { length: length, sampleRate: sampleRate } = audioBuffer;\n            const offlineAudioContext = new OfflineAudioContext({\n                length: length,\n                sampleRate: sampleRate\n            });\n            const source = offlineAudioContext.createBufferSource();\n            source.buffer = audioBuffer;\n            const analyser = offlineAudioContext.createAnalyser();\n            analyser.fftSize = 8192;\n            analyser.smoothingTimeConstant = 0.1;\n            source.connect(analyser);\n            // limit is :: 128 / sampleRate;\n            // but we just want 60fps - cuts ~1s from 6MB to 1MB of RAM\n            const renderQuantumInSeconds = 1 / 60;\n            const durationInSeconds = length / sampleRate;\n            const analyze = (index)=>{\n                const suspendTime = renderQuantumInSeconds * index;\n                if (suspendTime < durationInSeconds) offlineAudioContext.suspend(suspendTime).then(()=>{\n                    const fftResult = new Float32Array(analyser.frequencyBinCount);\n                    analyser.getFloatFrequencyData(fftResult);\n                    this.fftResults.push(fftResult);\n                    analyze(index + 1);\n                });\n                if (index === 1) offlineAudioContext.startRendering();\n                else offlineAudioContext.resume();\n            };\n            source.start(0);\n            analyze(1);\n            this.audio = audioElement;\n            this.context = offlineAudioContext;\n            this.analyser = analyser;\n            this.sampleRate = sampleRate;\n            this.audioBuffer = audioBuffer;\n        } else {\n            const audioContext = new AudioContext();\n            const track = audioContext.createMediaElementSource(audioElement);\n            const analyser = audioContext.createAnalyser();\n            analyser.fftSize = 8192;\n            analyser.smoothingTimeConstant = 0.1;\n            track.connect(analyser);\n            analyser.connect(audioContext.destination);\n            this.audio = audioElement;\n            this.context = audioContext;\n            this.analyser = analyser;\n            this.sampleRate = this.context.sampleRate;\n            this.audioBuffer = null;\n        }\n    }\n    /**\n   * Gets the current frequency domain data from the playing audio track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        let fftResult = null;\n        if (this.audioBuffer && this.fftResults.length) {\n            const pct = this.audio.currentTime / this.audio.duration;\n            const index = Math.min(pct * this.fftResults.length | 0, this.fftResults.length - 1);\n            fftResult = this.fftResults[index];\n        }\n        return $f32f064564ee62f6$export$2c3136da0bf130f9.getFrequencies(this.analyser, this.sampleRate, fftResult, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Resume the internal AudioContext if it was suspended due to the lack of\n   * user interaction when the AudioAnalysis was instantiated.\n   * @returns {Promise<true>}\n   */ async resumeIfSuspended() {\n        if (this.context.state === 'suspended') await this.context.resume();\n        return true;\n    }\n}\nglobalThis.AudioAnalysis = $f32f064564ee62f6$export$2c3136da0bf130f9;\n\n\nconst $29a8a70a9466b14f$export$50b76700e2b15e9 = `\nclass StreamProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.hasStarted = false;\n    this.hasInterrupted = false;\n    this.outputBuffers = [];\n    this.bufferLength = 128;\n    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null };\n    this.writeOffset = 0;\n    this.trackSampleOffsets = {};\n    this.port.onmessage = (event) => {\n      if (event.data) {\n        const payload = event.data;\n        if (payload.event === 'write') {\n          const int16Array = payload.buffer;\n          const float32Array = new Float32Array(int16Array.length);\n          for (let i = 0; i < int16Array.length; i++) {\n            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32\n          }\n          this.writeData(float32Array, payload.trackId);\n        } else if (\n          payload.event === 'offset' ||\n          payload.event === 'interrupt'\n        ) {\n          const requestId = payload.requestId;\n          const trackId = this.write.trackId;\n          const offset = this.trackSampleOffsets[trackId] || 0;\n          this.port.postMessage({\n            event: 'offset',\n            requestId,\n            trackId,\n            offset,\n          });\n          if (payload.event === 'interrupt') {\n            this.hasInterrupted = true;\n          }\n        } else {\n          throw new Error(\\`Unhandled event \"\\${payload.event}\"\\`);\n        }\n      }\n    };\n  }\n\n  writeData(float32Array, trackId = null) {\n    let { buffer } = this.write;\n    let offset = this.writeOffset;\n    for (let i = 0; i < float32Array.length; i++) {\n      buffer[offset++] = float32Array[i];\n      if (offset >= buffer.length) {\n        this.outputBuffers.push(this.write);\n        this.write = { buffer: new Float32Array(this.bufferLength), trackId };\n        buffer = this.write.buffer;\n        offset = 0;\n      }\n    }\n    this.writeOffset = offset;\n    return true;\n  }\n\n  process(inputs, outputs, parameters) {\n    const output = outputs[0];\n    const outputChannelData = output[0];\n    const outputBuffers = this.outputBuffers;\n    if (this.hasInterrupted) {\n      this.port.postMessage({ event: 'stop' });\n      return false;\n    } else if (outputBuffers.length) {\n      this.hasStarted = true;\n      const { buffer, trackId } = outputBuffers.shift();\n      for (let i = 0; i < outputChannelData.length; i++) {\n        outputChannelData[i] = buffer[i] || 0;\n      }\n      if (trackId) {\n        this.trackSampleOffsets[trackId] =\n          this.trackSampleOffsets[trackId] || 0;\n        this.trackSampleOffsets[trackId] += buffer.length;\n      }\n      return true;\n    } else if (this.hasStarted) {\n      this.port.postMessage({ event: 'stop' });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\nregisterProcessor('stream_processor', StreamProcessor);\n`;\nconst $29a8a70a9466b14f$var$script = new Blob([\n    $29a8a70a9466b14f$export$50b76700e2b15e9\n], {\n    type: 'application/javascript'\n});\nconst $29a8a70a9466b14f$var$src = URL.createObjectURL($29a8a70a9466b14f$var$script);\nconst $29a8a70a9466b14f$export$bfa8c596114d74df = $29a8a70a9466b14f$var$src;\n\n\n\nclass $d0a969833958d9e7$export$9698d62c78b8f366 {\n    /**\n   * Creates a new WavStreamPlayer instance\n   * @param {{sampleRate?: number}} options\n   * @returns {WavStreamPlayer}\n   */ constructor({ sampleRate: sampleRate = 44100 } = {}){\n        this.scriptSrc = (0, $29a8a70a9466b14f$export$bfa8c596114d74df);\n        this.sampleRate = sampleRate;\n        this.context = null;\n        this.stream = null;\n        this.analyser = null;\n        this.trackSampleOffsets = {};\n        this.interruptedTrackIds = {};\n    }\n    /**\n   * Connects the audio context and enables output to speakers\n   * @returns {Promise<true>}\n   */ async connect() {\n        this.context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        if (this._speakerID) this.context.setSinkId(this._speakerID);\n        if (this.context.state === \"suspended\") await this.context.resume();\n        try {\n            await this.context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const analyser = this.context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        this.analyser = analyser;\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the playing track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = \"frequency\", minDecibels = -100, maxDecibels = -30) {\n        if (!this.analyser) throw new Error(\"Not connected, please call .connect() first\");\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * @param {string} speaker deviceId\n   */ async updateSpeaker(speaker) {\n        const _prevSpeaker = this._speakerID;\n        this._speakerID = speaker;\n        if (this.context) try {\n            if (speaker === \"default\") await this.context.setSinkId();\n            else await this.context.setSinkId(speaker);\n        } catch (e) {\n            console.error(`Could not set sinkId to ${speaker}: ${e}`);\n            this._speakerID = _prevSpeaker;\n        }\n    }\n    /**\n   * Starts audio streaming\n   * @private\n   * @returns {Promise<true>}\n   */ _start() {\n        const streamNode = new AudioWorkletNode(this.context, \"stream_processor\");\n        streamNode.connect(this.context.destination);\n        streamNode.port.onmessage = (e)=>{\n            const { event: event } = e.data;\n            if (event === \"stop\") {\n                streamNode.disconnect();\n                this.stream = null;\n            } else if (event === \"offset\") {\n                const { requestId: requestId, trackId: trackId, offset: offset } = e.data;\n                const currentTime = offset / this.sampleRate;\n                this.trackSampleOffsets[requestId] = {\n                    trackId: trackId,\n                    offset: offset,\n                    currentTime: currentTime\n                };\n            }\n        };\n        this.analyser.disconnect();\n        streamNode.connect(this.analyser);\n        this.stream = streamNode;\n        return true;\n    }\n    /**\n   * Adds 16BitPCM data to the currently playing audio stream\n   * You can add chunks beyond the current play point and they will be queued for play\n   * @param {ArrayBuffer|Int16Array} arrayBuffer\n   * @param {string} [trackId]\n   * @returns {Int16Array}\n   */ add16BitPCM(arrayBuffer, trackId = \"default\") {\n        if (typeof trackId !== \"string\") throw new Error(`trackId must be a string`);\n        else if (this.interruptedTrackIds[trackId]) return;\n        if (!this.stream) this._start();\n        let buffer;\n        if (arrayBuffer instanceof Int16Array) buffer = arrayBuffer;\n        else if (arrayBuffer instanceof ArrayBuffer) buffer = new Int16Array(arrayBuffer);\n        else throw new Error(`argument must be Int16Array or ArrayBuffer`);\n        this.stream.port.postMessage({\n            event: \"write\",\n            buffer: buffer,\n            trackId: trackId\n        });\n        return buffer;\n    }\n    /**\n   * Gets the offset (sample count) of the currently playing stream\n   * @param {boolean} [interrupt]\n   * @returns {{trackId: string|null, offset: number, currentTime: number}}\n   */ async getTrackSampleOffset(interrupt = false) {\n        if (!this.stream) return null;\n        const requestId = crypto.randomUUID();\n        this.stream.port.postMessage({\n            event: interrupt ? \"interrupt\" : \"offset\",\n            requestId: requestId\n        });\n        let trackSampleOffset;\n        while(!trackSampleOffset){\n            trackSampleOffset = this.trackSampleOffsets[requestId];\n            await new Promise((r)=>setTimeout(()=>r(), 1));\n        }\n        const { trackId: trackId } = trackSampleOffset;\n        if (interrupt && trackId) this.interruptedTrackIds[trackId] = true;\n        return trackSampleOffset;\n    }\n    /**\n   * Strips the current stream and returns the sample offset of the audio\n   * @param {boolean} [interrupt]\n   * @returns {{trackId: string|null, offset: number, currentTime: number}}\n   */ async interrupt() {\n        return this.getTrackSampleOffset(true);\n    }\n}\nglobalThis.WavStreamPlayer = $d0a969833958d9e7$export$9698d62c78b8f366;\n\n\nconst $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet = `\nclass AudioProcessor extends AudioWorkletProcessor {\n\n  constructor() {\n    super();\n    this.port.onmessage = this.receive.bind(this);\n    this.initialize();\n  }\n\n  initialize() {\n    this.foundAudio = false;\n    this.recording = false;\n    this.chunks = [];\n  }\n\n  /**\n   * Concatenates sampled chunks into channels\n   * Format is chunk[Left[], Right[]]\n   */\n  readChannelData(chunks, channel = -1, maxChannels = 9) {\n    let channelLimit;\n    if (channel !== -1) {\n      if (chunks[0] && chunks[0].length - 1 < channel) {\n        throw new Error(\n          \\`Channel \\${channel} out of range: max \\${chunks[0].length}\\`\n        );\n      }\n      channelLimit = channel + 1;\n    } else {\n      channel = 0;\n      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);\n    }\n    const channels = [];\n    for (let n = channel; n < channelLimit; n++) {\n      const length = chunks.reduce((sum, chunk) => {\n        return sum + chunk[n].length;\n      }, 0);\n      const buffers = chunks.map((chunk) => chunk[n]);\n      const result = new Float32Array(length);\n      let offset = 0;\n      for (let i = 0; i < buffers.length; i++) {\n        result.set(buffers[i], offset);\n        offset += buffers[i].length;\n      }\n      channels[n] = result;\n    }\n    return channels;\n  }\n\n  /**\n   * Combines parallel audio data into correct format,\n   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]\n   */\n  formatAudioData(channels) {\n    if (channels.length === 1) {\n      // Simple case is only one channel\n      const float32Array = channels[0].slice();\n      const meanValues = channels[0].slice();\n      return { float32Array, meanValues };\n    } else {\n      const float32Array = new Float32Array(\n        channels[0].length * channels.length\n      );\n      const meanValues = new Float32Array(channels[0].length);\n      for (let i = 0; i < channels[0].length; i++) {\n        const offset = i * channels.length;\n        let meanValue = 0;\n        for (let n = 0; n < channels.length; n++) {\n          float32Array[offset + n] = channels[n][i];\n          meanValue += channels[n][i];\n        }\n        meanValues[i] = meanValue / channels.length;\n      }\n      return { float32Array, meanValues };\n    }\n  }\n\n  /**\n   * Converts 32-bit float data to 16-bit integers\n   */\n  floatTo16BitPCM(float32Array) {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      let s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  }\n\n  /**\n   * Retrieves the most recent amplitude values from the audio stream\n   * @param {number} channel\n   */\n  getValues(channel = -1) {\n    const channels = this.readChannelData(this.chunks, channel);\n    const { meanValues } = this.formatAudioData(channels);\n    return { meanValues, channels };\n  }\n\n  /**\n   * Exports chunks as an audio/wav file\n   */\n  export() {\n    const channels = this.readChannelData(this.chunks);\n    const { float32Array, meanValues } = this.formatAudioData(channels);\n    const audioData = this.floatTo16BitPCM(float32Array);\n    return {\n      meanValues: meanValues,\n      audio: {\n        bitsPerSample: 16,\n        channels: channels,\n        data: audioData,\n      },\n    };\n  }\n\n  receive(e) {\n    const { event, id } = e.data;\n    let receiptData = {};\n    switch (event) {\n      case 'start':\n        this.recording = true;\n        break;\n      case 'stop':\n        this.recording = false;\n        break;\n      case 'clear':\n        this.initialize();\n        break;\n      case 'export':\n        receiptData = this.export();\n        break;\n      case 'read':\n        receiptData = this.getValues();\n        break;\n      default:\n        break;\n    }\n    // Always send back receipt\n    this.port.postMessage({ event: 'receipt', id, data: receiptData });\n  }\n\n  sendChunk(chunk) {\n    const channels = this.readChannelData([chunk]);\n    const { float32Array, meanValues } = this.formatAudioData(channels);\n    const rawAudioData = this.floatTo16BitPCM(float32Array);\n    const monoAudioData = this.floatTo16BitPCM(meanValues);\n    this.port.postMessage({\n      event: 'chunk',\n      data: {\n        mono: monoAudioData,\n        raw: rawAudioData,\n      },\n    });\n  }\n\n  process(inputList, outputList, parameters) {\n    // Copy input to output (e.g. speakers)\n    // Note that this creates choppy sounds with Mac products\n    const sourceLimit = Math.min(inputList.length, outputList.length);\n    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {\n      const input = inputList[inputNum];\n      const output = outputList[inputNum];\n      const channelCount = Math.min(input.length, output.length);\n      for (let channelNum = 0; channelNum < channelCount; channelNum++) {\n        input[channelNum].forEach((sample, i) => {\n          output[channelNum][i] = sample;\n        });\n      }\n    }\n    const inputs = inputList[0];\n    // There's latency at the beginning of a stream before recording starts\n    // Make sure we actually receive audio data before we start storing chunks\n    let sliceIndex = 0;\n    if (!this.foundAudio) {\n      for (const channel of inputs) {\n        sliceIndex = 0; // reset for each channel\n        if (this.foundAudio) {\n          break;\n        }\n        if (channel) {\n          for (const value of channel) {\n            if (value !== 0) {\n              // find only one non-zero entry in any channel\n              this.foundAudio = true;\n              break;\n            } else {\n              sliceIndex++;\n            }\n          }\n        }\n      }\n    }\n    if (inputs && inputs[0] && this.foundAudio && this.recording) {\n      // We need to copy the TypedArray, because the \\`process\\`\n      // internals will reuse the same buffer to hold each input\n      const chunk = inputs.map((input) => input.slice(sliceIndex));\n      this.chunks.push(chunk);\n      this.sendChunk(chunk);\n    }\n    return true;\n  }\n}\n\nregisterProcessor('audio_processor', AudioProcessor);\n`;\nconst $8e1d1e6ff08f6fb5$var$script = new Blob([\n    $8e1d1e6ff08f6fb5$var$AudioProcessorWorklet\n], {\n    type: 'application/javascript'\n});\nconst $8e1d1e6ff08f6fb5$var$src = URL.createObjectURL($8e1d1e6ff08f6fb5$var$script);\nconst $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c = $8e1d1e6ff08f6fb5$var$src;\n\n\n\n\nclass $62bc376044a05513$export$439b217ca659a877 {\n    /**\n   * Create a new WavRecorder instance\n   * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]\n   * @returns {WavRecorder}\n   */ constructor({ sampleRate: sampleRate = 44100, outputToSpeakers: outputToSpeakers = false, debug: debug = false } = {}){\n        // Script source\n        this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c);\n        // Config\n        this.sampleRate = sampleRate;\n        this.outputToSpeakers = outputToSpeakers;\n        this.debug = !!debug;\n        this._deviceChangeCallback = null;\n        this._devices = [];\n        this.deviceSelection = null;\n        // State variables\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        this.recording = false;\n        // Event handling with AudioWorklet\n        this._lastEventId = 0;\n        this.eventReceipts = {};\n        this.eventTimeout = 5000;\n        // Process chunks of audio\n        this._chunkProcessor = ()=>{};\n        this._chunkProcessorSize = void 0;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n    }\n    /**\n   * Decodes audio data from multiple formats to a Blob, url, Float32Array and AudioBuffer\n   * @param {Blob|Float32Array|Int16Array|ArrayBuffer|number[]} audioData\n   * @param {number} sampleRate\n   * @param {number} fromSampleRate\n   * @returns {Promise<DecodedAudioType>}\n   */ static async decode(audioData, sampleRate = 44100, fromSampleRate = -1) {\n        const context = new AudioContext({\n            sampleRate: sampleRate\n        });\n        let arrayBuffer;\n        let blob;\n        if (audioData instanceof Blob) {\n            if (fromSampleRate !== -1) throw new Error(`Can not specify \"fromSampleRate\" when reading from Blob`);\n            blob = audioData;\n            arrayBuffer = await blob.arrayBuffer();\n        } else if (audioData instanceof ArrayBuffer) {\n            if (fromSampleRate !== -1) throw new Error(`Can not specify \"fromSampleRate\" when reading from ArrayBuffer`);\n            arrayBuffer = audioData;\n            blob = new Blob([\n                arrayBuffer\n            ], {\n                type: 'audio/wav'\n            });\n        } else {\n            let float32Array;\n            let data;\n            if (audioData instanceof Int16Array) {\n                data = audioData;\n                float32Array = new Float32Array(audioData.length);\n                for(let i = 0; i < audioData.length; i++)float32Array[i] = audioData[i] / 0x8000;\n            } else if (audioData instanceof Float32Array) float32Array = audioData;\n            else if (audioData instanceof Array) float32Array = new Float32Array(audioData);\n            else throw new Error(`\"audioData\" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>`);\n            if (fromSampleRate === -1) throw new Error(`Must specify \"fromSampleRate\" when reading from Float32Array, In16Array or Array`);\n            else if (fromSampleRate < 3000) throw new Error(`Minimum \"fromSampleRate\" is 3000 (3kHz)`);\n            if (!data) data = (0, $6d4b7449a1e1544a$export$13afda237b1c9846).floatTo16BitPCM(float32Array);\n            const audio = {\n                bitsPerSample: 16,\n                channels: [\n                    float32Array\n                ],\n                data: data\n            };\n            const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n            const result = packer.pack(fromSampleRate, audio);\n            blob = result.blob;\n            arrayBuffer = await blob.arrayBuffer();\n        }\n        const audioBuffer = await context.decodeAudioData(arrayBuffer);\n        const values = audioBuffer.getChannelData(0);\n        const url = URL.createObjectURL(blob);\n        return {\n            blob: blob,\n            url: url,\n            values: values,\n            audioBuffer: audioBuffer\n        };\n    }\n    /**\n   * Logs data in debug mode\n   * @param {...any} arguments\n   * @returns {true}\n   */ log() {\n        if (this.debug) this.log(...arguments);\n        return true;\n    }\n    /**\n   * Retrieves the current sampleRate for the recorder\n   * @returns {number}\n   */ getSampleRate() {\n        return this.sampleRate;\n    }\n    /**\n   * Retrieves the current status of the recording\n   * @returns {\"ended\"|\"paused\"|\"recording\"}\n   */ getStatus() {\n        if (!this.processor) return 'ended';\n        else if (!this.recording) return 'paused';\n        else return 'recording';\n    }\n    /**\n   * Sends an event to the AudioWorklet\n   * @private\n   * @param {string} name\n   * @param {{[key: string]: any}} data\n   * @param {AudioWorkletNode} [_processor]\n   * @returns {Promise<{[key: string]: any}>}\n   */ async _event(name, data = {}, _processor = null) {\n        _processor = _processor || this.processor;\n        if (!_processor) throw new Error('Can not send events without recording first');\n        const message = {\n            event: name,\n            id: this._lastEventId++,\n            data: data\n        };\n        _processor.port.postMessage(message);\n        const t0 = new Date().valueOf();\n        while(!this.eventReceipts[message.id]){\n            if (new Date().valueOf() - t0 > this.eventTimeout) throw new Error(`Timeout waiting for \"${name}\" event`);\n            await new Promise((res)=>setTimeout(()=>res(true), 1));\n        }\n        const payload = this.eventReceipts[message.id];\n        delete this.eventReceipts[message.id];\n        return payload;\n    }\n    /**\n   * Sets device change callback, remove if callback provided is `null`\n   * @param {(Array<MediaDeviceInfo & {default: boolean}>): void|null} callback\n   * @returns {true}\n   */ listenForDeviceChange(callback) {\n        if (callback === null && this._deviceChangeCallback) {\n            navigator.mediaDevices.removeEventListener('devicechange', this._deviceChangeCallback);\n            this._deviceChangeCallback = null;\n        } else if (callback !== null) {\n            // Basically a debounce; we only want this called once when devices change\n            // And we only want the most recent callback() to be executed\n            // if a few are operating at the same time\n            let lastId = 0;\n            let lastDevices = [];\n            const serializeDevices = (devices)=>devices.map((d)=>d.deviceId).sort().join(',');\n            const cb = async ()=>{\n                let id = ++lastId;\n                const devices = await this.listDevices();\n                if (id === lastId) {\n                    if (serializeDevices(lastDevices) !== serializeDevices(devices)) {\n                        lastDevices = devices;\n                        callback(devices.slice());\n                    }\n                }\n            };\n            navigator.mediaDevices.addEventListener('devicechange', cb);\n            cb();\n            this._deviceChangeCallback = cb;\n        }\n        return true;\n    }\n    /**\n   * Manually request permission to use the microphone\n   * @returns {Promise<true>}\n   */ async requestPermission() {\n        const permissionStatus = await navigator.permissions.query({\n            name: 'microphone'\n        });\n        if (permissionStatus.state === 'denied') window.alert('You must grant microphone access to use this feature.');\n        else if (permissionStatus.state === 'prompt') try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            const tracks = stream.getTracks();\n            tracks.forEach((track)=>track.stop());\n        } catch (e) {\n            window.alert('You must grant microphone access to use this feature.');\n        }\n        return true;\n    }\n    /**\n   * List all eligible devices for recording, will request permission to use microphone\n   * @returns {Promise<Array<MediaDeviceInfo & {default: boolean}>>}\n   */ async listDevices() {\n        if (!navigator.mediaDevices || !('enumerateDevices' in navigator.mediaDevices)) throw new Error('Could not request user devices');\n        await this.requestPermission();\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const audioDevices = devices.filter((device)=>device.kind === 'audioinput');\n        return audioDevices;\n    // const defaultDeviceIndex = audioDevices.findIndex(\n    //   (device) => device.deviceId === 'default'\n    // );\n    // const deviceList = [];\n    // if (defaultDeviceIndex !== -1) {\n    //   let defaultDevice = audioDevices.splice(defaultDeviceIndex, 1)[0];\n    //   let existingIndex = audioDevices.findIndex(\n    //     (device) => device.groupId === defaultDevice.groupId\n    //   );\n    //   if (existingIndex !== -1) {\n    //     defaultDevice = audioDevices.splice(existingIndex, 1)[0];\n    //   }\n    //   defaultDevice.default = true;\n    //   deviceList.push(defaultDevice);\n    // }\n    // return deviceList.concat(audioDevices);\n    }\n    /**\n   * Begins a recording session and requests microphone permissions if not already granted\n   * Microphone recording indicator will appear on browser tab but status will be \"paused\"\n   * @param {string} [deviceId] if no device provided, default device will be used\n   * @returns {Promise<true>}\n   */ async begin(deviceId) {\n        if (this.processor) throw new Error(`Already connected: please call .end() to start a new session`);\n        if (!navigator.mediaDevices || !('getUserMedia' in navigator.mediaDevices)) throw new Error('Could not request user media');\n        deviceId = deviceId ?? this.deviceSelection?.deviceId;\n        try {\n            const config = {\n                audio: true\n            };\n            if (deviceId) config.audio = {\n                deviceId: {\n                    exact: deviceId\n                }\n            };\n            this.stream = await navigator.mediaDevices.getUserMedia(config);\n        } catch (err) {\n            throw new Error('Could not start media stream');\n        }\n        this.listDevices().then((devices)=>{\n            deviceId = this.stream.getAudioTracks()[0].getSettings().deviceId;\n            console.log('find current device', devices, deviceId, this.stream.getAudioTracks()[0].getSettings());\n            this.deviceSelection = devices.find((d)=>d.deviceId === deviceId);\n            console.log('current device', this.deviceSelection);\n        });\n        const context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        const source = context.createMediaStreamSource(this.stream);\n        // Load and execute the module script.\n        try {\n            await context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const processor = new AudioWorkletNode(context, 'audio_processor');\n        processor.port.onmessage = (e)=>{\n            const { event: event, id: id, data: data } = e.data;\n            if (event === 'receipt') this.eventReceipts[id] = data;\n            else if (event === 'chunk') {\n                if (this._chunkProcessorSize) {\n                    const buffer = this._chunkProcessorBuffer;\n                    this._chunkProcessorBuffer = {\n                        raw: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.raw, data.raw),\n                        mono: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.mono, data.mono)\n                    };\n                    if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {\n                        this._chunkProcessor(this._chunkProcessorBuffer);\n                        this._chunkProcessorBuffer = {\n                            raw: new ArrayBuffer(0),\n                            mono: new ArrayBuffer(0)\n                        };\n                    }\n                } else this._chunkProcessor(data);\n            }\n        };\n        const node = source.connect(processor);\n        const analyser = context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        node.connect(analyser);\n        if (this.outputToSpeakers) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Warning: Output to speakers may affect sound quality,\\nespecially due to system audio feedback preventative measures.\\nuse only for debugging\");\n            analyser.connect(context.destination);\n        }\n        this.source = source;\n        this.node = node;\n        this.analyser = analyser;\n        this.processor = processor;\n        console.log('begin completed');\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the recording track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = 'frequency', minDecibels = -100, maxDecibels = -30) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Pauses the recording\n   * Keeps microphone stream open but halts storage of audio\n   * @returns {Promise<true>}\n   */ async pause() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        else if (!this.recording) throw new Error('Already paused: please call .record() first');\n        if (this._chunkProcessorBuffer.raw.byteLength) this._chunkProcessor(this._chunkProcessorBuffer);\n        this.log('Pausing ...');\n        await this._event('stop');\n        this.recording = false;\n        return true;\n    }\n    /**\n   * Start recording stream and storing to memory from the connected audio source\n   * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]\n   * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio\n   * @returns {Promise<true>}\n   */ async record(chunkProcessor = ()=>{}, chunkSize = 8192) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        else if (this.recording) throw new Error('Already recording: please call .pause() first');\n        else if (typeof chunkProcessor !== 'function') throw new Error(`chunkProcessor must be a function`);\n        this._chunkProcessor = chunkProcessor;\n        this._chunkProcessorSize = chunkSize;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n        this.log('Recording ...');\n        await this._event('start');\n        this.recording = true;\n        return true;\n    }\n    /**\n   * Clears the audio buffer, empties stored recording\n   * @returns {Promise<true>}\n   */ async clear() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        await this._event('clear');\n        return true;\n    }\n    /**\n   * Reads the current audio stream data\n   * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}\n   */ async read() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        this.log('Reading ...');\n        const result = await this._event('read');\n        return result;\n    }\n    /**\n   * Saves the current audio stream to a file\n   * @param {boolean} [force] Force saving while still recording\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async save(force = false) {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        if (!force && this.recording) throw new Error('Currently recording: please call .pause() first, or call .save(true) to force');\n        this.log('Exporting ...');\n        const exportData = await this._event('export');\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Ends the current recording session and saves the result\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async end() {\n        if (!this.processor) throw new Error('Session ended: please call .begin() first');\n        const _processor = this.processor;\n        this.log('Stopping ...');\n        await this._event('stop');\n        this.recording = false;\n        const tracks = this.stream.getTracks();\n        tracks.forEach((track)=>track.stop());\n        this.log('Exporting ...');\n        const exportData = await this._event('export', {}, _processor);\n        this.processor.disconnect();\n        this.source.disconnect();\n        this.node.disconnect();\n        this.analyser.disconnect();\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Performs a full cleanup of WavRecorder instance\n   * Stops actively listening via microphone and removes existing listeners\n   * @returns {Promise<true>}\n   */ async quit() {\n        this.listenForDeviceChange(null);\n        // we do not reset this on end so that selections persist across starts\n        this.deviceSelection = null;\n        if (this.processor) await this.end();\n        return true;\n    }\n}\nglobalThis.WavRecorder = $62bc376044a05513$export$439b217ca659a877;\n\n\n\n\n\nclass $5fc11d7bc0d20724$export$2934cf2d25c67a48 {\n    /**\n   * Create a new MediaStreamRecorder instance\n   * @param {{sampleRate?: number, outputToSpeakers?: boolean, debug?: boolean}} [options]\n   * @returns {MediaStreamRecorder}\n   */ constructor({ sampleRate: sampleRate = 44100, outputToSpeakers: outputToSpeakers = false, debug: debug = false } = {}){\n        // Script source\n        this.scriptSrc = (0, $8e1d1e6ff08f6fb5$export$1f65f50a8cbff43c);\n        // Config\n        this.sampleRate = sampleRate;\n        this.outputToSpeakers = outputToSpeakers;\n        this.debug = !!debug;\n        // State variables\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        this.recording = false;\n        // Event handling with AudioWorklet\n        this._lastEventId = 0;\n        this.eventReceipts = {};\n        this.eventTimeout = 5000;\n        // Process chunks of audio\n        this._chunkProcessor = ()=>{};\n        this._chunkProcessorSize = void 0;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n    }\n    /**\n   * Logs data in debug mode\n   * @param {...any} arguments\n   * @returns {true}\n   */ log() {\n        if (this.debug) this.log(...arguments);\n        return true;\n    }\n    /**\n   * Retrieves the current sampleRate for the recorder\n   * @returns {number}\n   */ getSampleRate() {\n        return this.sampleRate;\n    }\n    /**\n   * Retrieves the current status of the recording\n   * @returns {\"ended\"|\"paused\"|\"recording\"}\n   */ getStatus() {\n        if (!this.processor) return \"ended\";\n        else if (!this.recording) return \"paused\";\n        else return \"recording\";\n    }\n    /**\n   * Sends an event to the AudioWorklet\n   * @private\n   * @param {string} name\n   * @param {{[key: string]: any}} data\n   * @param {AudioWorkletNode} [_processor]\n   * @returns {Promise<{[key: string]: any}>}\n   */ async _event(name, data = {}, _processor = null) {\n        _processor = _processor || this.processor;\n        if (!_processor) throw new Error(\"Can not send events without recording first\");\n        const message = {\n            event: name,\n            id: this._lastEventId++,\n            data: data\n        };\n        _processor.port.postMessage(message);\n        const t0 = new Date().valueOf();\n        while(!this.eventReceipts[message.id]){\n            if (new Date().valueOf() - t0 > this.eventTimeout) throw new Error(`Timeout waiting for \"${name}\" event`);\n            await new Promise((res)=>setTimeout(()=>res(true), 1));\n        }\n        const payload = this.eventReceipts[message.id];\n        delete this.eventReceipts[message.id];\n        return payload;\n    }\n    /**\n   * Begins a recording session for the given audioTrack\n   * Microphone recording indicator will appear on browser tab but status will be \"paused\"\n   * @param {MediaStreamTrack} [audioTrack] if no device provided, default device will be used\n   * @returns {Promise<true>}\n   */ async begin(audioTrack) {\n        if (this.processor) throw new Error(`Already connected: please call .end() to start a new session`);\n        if (!audioTrack || audioTrack.kind !== \"audio\") throw new Error(\"No audio track provided\");\n        this.stream = new MediaStream([\n            audioTrack\n        ]);\n        const context = new AudioContext({\n            sampleRate: this.sampleRate\n        });\n        const source = context.createMediaStreamSource(this.stream);\n        // Load and execute the module script.\n        try {\n            await context.audioWorklet.addModule(this.scriptSrc);\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Could not add audioWorklet module: ${this.scriptSrc}`);\n        }\n        const processor = new AudioWorkletNode(context, \"audio_processor\");\n        processor.port.onmessage = (e)=>{\n            const { event: event, id: id, data: data } = e.data;\n            if (event === \"receipt\") this.eventReceipts[id] = data;\n            else if (event === \"chunk\") {\n                if (this._chunkProcessorSize) {\n                    const buffer = this._chunkProcessorBuffer;\n                    this._chunkProcessorBuffer = {\n                        raw: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.raw, data.raw),\n                        mono: (0, $6d4b7449a1e1544a$export$13afda237b1c9846).mergeBuffers(buffer.mono, data.mono)\n                    };\n                    if (this._chunkProcessorBuffer.mono.byteLength >= this._chunkProcessorSize) {\n                        this._chunkProcessor(this._chunkProcessorBuffer);\n                        this._chunkProcessorBuffer = {\n                            raw: new ArrayBuffer(0),\n                            mono: new ArrayBuffer(0)\n                        };\n                    }\n                } else this._chunkProcessor(data);\n            }\n        };\n        const node = source.connect(processor);\n        const analyser = context.createAnalyser();\n        analyser.fftSize = 8192;\n        analyser.smoothingTimeConstant = 0.1;\n        node.connect(analyser);\n        if (this.outputToSpeakers) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Warning: Output to speakers may affect sound quality,\\nespecially due to system audio feedback preventative measures.\\nuse only for debugging\");\n            analyser.connect(context.destination);\n        }\n        this.source = source;\n        this.node = node;\n        this.analyser = analyser;\n        this.processor = processor;\n        return true;\n    }\n    /**\n   * Gets the current frequency domain data from the recording track\n   * @param {\"frequency\"|\"music\"|\"voice\"} [analysisType]\n   * @param {number} [minDecibels] default -100\n   * @param {number} [maxDecibels] default -30\n   * @returns {import('./analysis/audio_analysis.js').AudioAnalysisOutputType}\n   */ getFrequencies(analysisType = \"frequency\", minDecibels = -100, maxDecibels = -30) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        return (0, $f32f064564ee62f6$export$2c3136da0bf130f9).getFrequencies(this.analyser, this.sampleRate, null, analysisType, minDecibels, maxDecibels);\n    }\n    /**\n   * Pauses the recording\n   * Keeps microphone stream open but halts storage of audio\n   * @returns {Promise<true>}\n   */ async pause() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        else if (!this.recording) throw new Error(\"Already paused: please call .record() first\");\n        if (this._chunkProcessorBuffer.raw.byteLength) this._chunkProcessor(this._chunkProcessorBuffer);\n        this.log(\"Pausing ...\");\n        await this._event(\"stop\");\n        this.recording = false;\n        return true;\n    }\n    /**\n   * Start recording stream and storing to memory from the connected audio source\n   * @param {(data: { mono: Int16Array; raw: Int16Array }) => any} [chunkProcessor]\n   * @param {number} [chunkSize] chunkProcessor will not be triggered until this size threshold met in mono audio\n   * @returns {Promise<true>}\n   */ async record(chunkProcessor = ()=>{}, chunkSize = 8192) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        else if (this.recording) throw new Error(\"Already recording: HELLO please call .pause() first\");\n        else if (typeof chunkProcessor !== \"function\") throw new Error(`chunkProcessor must be a function`);\n        this._chunkProcessor = chunkProcessor;\n        this._chunkProcessorSize = chunkSize;\n        this._chunkProcessorBuffer = {\n            raw: new ArrayBuffer(0),\n            mono: new ArrayBuffer(0)\n        };\n        this.log(\"Recording ...\");\n        await this._event(\"start\");\n        this.recording = true;\n        return true;\n    }\n    /**\n   * Clears the audio buffer, empties stored recording\n   * @returns {Promise<true>}\n   */ async clear() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        await this._event(\"clear\");\n        return true;\n    }\n    /**\n   * Reads the current audio stream data\n   * @returns {Promise<{meanValues: Float32Array, channels: Array<Float32Array>}>}\n   */ async read() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        this.log(\"Reading ...\");\n        const result = await this._event(\"read\");\n        return result;\n    }\n    /**\n   * Saves the current audio stream to a file\n   * @param {boolean} [force] Force saving while still recording\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async save(force = false) {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        if (!force && this.recording) throw new Error(\"Currently recording: please call .pause() first, or call .save(true) to force\");\n        this.log(\"Exporting ...\");\n        const exportData = await this._event(\"export\");\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Ends the current recording session and saves the result\n   * @returns {Promise<import('./wav_packer.js').WavPackerAudioType>}\n   */ async end() {\n        if (!this.processor) throw new Error(\"Session ended: please call .begin() first\");\n        const _processor = this.processor;\n        this.log(\"Stopping ...\");\n        await this._event(\"stop\");\n        this.recording = false;\n        this.log(\"Exporting ...\");\n        const exportData = await this._event(\"export\", {}, _processor);\n        this.processor.disconnect();\n        this.source.disconnect();\n        this.node.disconnect();\n        this.analyser.disconnect();\n        this.stream = null;\n        this.processor = null;\n        this.source = null;\n        this.node = null;\n        const packer = new (0, $6d4b7449a1e1544a$export$13afda237b1c9846)();\n        const result = packer.pack(this.sampleRate, exportData.audio);\n        return result;\n    }\n    /**\n   * Performs a full cleanup of WavRecorder instance\n   * Stops actively listening via microphone and removes existing listeners\n   * @returns {Promise<true>}\n   */ async quit() {\n        this.listenForDeviceChange(null);\n        if (this.processor) await this.end();\n        return true;\n    }\n}\nglobalThis.WavRecorder = WavRecorder;\n\n\n\n\nvar $fc49a56cd8739127$var$__extends =  false || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar $fc49a56cd8739127$var$__awaiter =  false || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar $fc49a56cd8739127$var$__generator =  false || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar $fc49a56cd8739127$export$4a0c46dbbe2ddb67 = /** @class */ function() {\n    function MediaManager() {\n        this._callbacks = {};\n        this._micEnabled = true;\n        this._camEnabled = false;\n    }\n    MediaManager.prototype.setUserAudioCallback = function(userAudioCallback) {\n        this._userAudioCallback = userAudioCallback;\n    };\n    MediaManager.prototype.setRTVIOptions = function(options, override) {\n        var _a, _b, _c;\n        if (override === void 0) override = false;\n        if (this._options && !override) return;\n        this._options = options;\n        this._callbacks = (_a = options.callbacks) !== null && _a !== void 0 ? _a : {};\n        this._micEnabled = (_b = options.enableMic) !== null && _b !== void 0 ? _b : true;\n        this._camEnabled = (_c = options.enableCam) !== null && _c !== void 0 ? _c : false;\n    };\n    return MediaManager;\n}();\nvar $fc49a56cd8739127$export$45c5b9bfba2f6304 = /** @class */ function(_super) {\n    $fc49a56cd8739127$var$__extends(WavMediaManager, _super);\n    function WavMediaManager(recorderChunkSize, recorderSampleRate) {\n        if (recorderChunkSize === void 0) recorderChunkSize = undefined;\n        if (recorderSampleRate === void 0) recorderSampleRate = 24000;\n        var _this = _super.call(this) || this;\n        _this._initialized = false;\n        _this._recorderChunkSize = undefined;\n        _this._recorderChunkSize = recorderChunkSize;\n        _this._wavRecorder = new (0, $62bc376044a05513$export$439b217ca659a877)({\n            sampleRate: recorderSampleRate\n        });\n        _this._wavStreamPlayer = new (0, $d0a969833958d9e7$export$9698d62c78b8f366)({\n            sampleRate: 24000\n        });\n        return _this;\n    }\n    WavMediaManager.prototype.initialize = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.begin()\n                        ];\n                    case 1:\n                        _a.sent();\n                        this._wavRecorder.listenForDeviceChange(null);\n                        this._wavRecorder.listenForDeviceChange(this._handleAvailableDevicesUpdated.bind(this));\n                        return [\n                            4 /*yield*/ ,\n                            this._wavStreamPlayer.connect()\n                        ];\n                    case 2:\n                        _a.sent();\n                        this._initialized = true;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.connect = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            var isAlreadyRecording;\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        if (!!this._initialized) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.initialize()\n                        ];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        isAlreadyRecording = this._wavRecorder.getStatus() == \"recording\";\n                        if (!(this._micEnabled && !isAlreadyRecording)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._startRecording()\n                        ];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.disconnect = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        if (!this._initialized) return [\n                            2 /*return*/ \n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.end()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this._wavStreamPlayer.interrupt()\n                        ];\n                    case 2:\n                        _a.sent();\n                        this._initialized = false;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.userStartedSpeaking = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                return [\n                    2 /*return*/ ,\n                    this._wavStreamPlayer.interrupt()\n                ];\n            });\n        });\n    };\n    WavMediaManager.prototype.bufferBotAudio = function(data, id) {\n        return this._wavStreamPlayer.add16BitPCM(data, id);\n    };\n    WavMediaManager.prototype.getAllMics = function() {\n        return this._wavRecorder.listDevices();\n    };\n    WavMediaManager.prototype.getAllCams = function() {\n        // TODO: Video not supported yet\n        return Promise.resolve([]);\n    };\n    WavMediaManager.prototype.getAllSpeakers = function() {\n        // TODO: Implement speaker support\n        return Promise.resolve([]);\n    };\n    WavMediaManager.prototype.updateMic = function(micId) {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            var prevMic, curMic;\n            var _a, _b;\n            return $fc49a56cd8739127$var$__generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        prevMic = this._wavRecorder.deviceSelection;\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.end()\n                        ];\n                    case 1:\n                        _c.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.begin(micId)\n                        ];\n                    case 2:\n                        _c.sent();\n                        if (!this._micEnabled) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._startRecording()\n                        ];\n                    case 3:\n                        _c.sent();\n                        _c.label = 4;\n                    case 4:\n                        curMic = this._wavRecorder.deviceSelection;\n                        if (curMic && prevMic && prevMic.label !== curMic.label) (_b = (_a = this._callbacks).onMicUpdated) === null || _b === void 0 || _b.call(_a, curMic);\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.updateCam = function(camId) {\n    // TODO: Video not supported yet\n    };\n    WavMediaManager.prototype.updateSpeaker = function(speakerId) {\n    // TODO: Implement speaker support\n    };\n    Object.defineProperty(WavMediaManager.prototype, \"selectedMic\", {\n        get: function() {\n            var _a;\n            return (_a = this._wavRecorder.deviceSelection) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WavMediaManager.prototype, \"selectedCam\", {\n        get: function() {\n            // TODO: Video not supported yet\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WavMediaManager.prototype, \"selectedSpeaker\", {\n        get: function() {\n            // TODO: Implement speaker support\n            return {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WavMediaManager.prototype.enableMic = function(enable) {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, Promise, function() {\n            var _this = this;\n            return $fc49a56cd8739127$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        this._micEnabled = enable;\n                        if (!this._wavRecorder.stream) return [\n                            2 /*return*/ \n                        ];\n                        this._wavRecorder.stream.getAudioTracks().forEach(function(track) {\n                            var _a, _b;\n                            track.enabled = enable;\n                            if (!enable) (_b = (_a = _this._callbacks).onTrackStopped) === null || _b === void 0 || _b.call(_a, track, $fc49a56cd8739127$var$localParticipant());\n                        });\n                        if (!enable) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._startRecording()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                    case 2:\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.pause()\n                        ];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype.enableCam = function(enable) {\n    // TODO: Video not supported yet\n    };\n    Object.defineProperty(WavMediaManager.prototype, \"isCamEnabled\", {\n        get: function() {\n            // TODO: Video not supported yet\n            return false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(WavMediaManager.prototype, \"isMicEnabled\", {\n        get: function() {\n            return this._micEnabled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WavMediaManager.prototype.tracks = function() {\n        var _a;\n        var tracks = (_a = this._wavRecorder.stream) === null || _a === void 0 ? void 0 : _a.getTracks()[0];\n        return {\n            local: tracks ? {\n                audio: tracks\n            } : {}\n        };\n    };\n    WavMediaManager.prototype._startRecording = function() {\n        return $fc49a56cd8739127$var$__awaiter(this, void 0, void 0, function() {\n            var track;\n            var _this = this;\n            var _a, _b, _c;\n            return $fc49a56cd8739127$var$__generator(this, function(_d) {\n                switch(_d.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._wavRecorder.record(function(data) {\n                                _this._userAudioCallback(data.mono);\n                            }, this._recorderChunkSize)\n                        ];\n                    case 1:\n                        _d.sent();\n                        track = (_a = this._wavRecorder.stream) === null || _a === void 0 ? void 0 : _a.getAudioTracks()[0];\n                        if (track) (_c = (_b = this._callbacks).onTrackStarted) === null || _c === void 0 || _c.call(_b, track, $fc49a56cd8739127$var$localParticipant());\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    WavMediaManager.prototype._handleAvailableDevicesUpdated = function(devices) {\n        var _a, _b, _c, _d;\n        (_b = (_a = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a, devices.filter(function(d) {\n            return d.kind === \"videoinput\";\n        }));\n        (_d = (_c = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c, devices.filter(function(d) {\n            return d.kind === \"audioinput\";\n        }));\n        // if the current device went away or we're using the default and\n        // the default changed, reset the mic.\n        var defaultDevice = devices.find(function(d) {\n            return d.deviceId === \"default\";\n        });\n        var currentDevice = this._wavRecorder.deviceSelection;\n        if (currentDevice && (!devices.some(function(d) {\n            return d.deviceId === currentDevice.deviceId;\n        }) || currentDevice.deviceId === \"default\" && currentDevice.label !== (defaultDevice === null || defaultDevice === void 0 ? void 0 : defaultDevice.label))) this.updateMic(\"\");\n    };\n    return WavMediaManager;\n}($fc49a56cd8739127$export$4a0c46dbbe2ddb67);\nvar $fc49a56cd8739127$var$localParticipant = function() {\n    return {\n        id: \"local\",\n        name: \"\",\n        local: true\n    };\n};\n\n\n\n\n\nvar $22ece045290c996a$var$__extends =  false || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar $22ece045290c996a$var$__awaiter =  false || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar $22ece045290c996a$var$__generator =  false || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar $22ece045290c996a$export$c95c65abc5f47125 = /** @class */ function(_super) {\n    $22ece045290c996a$var$__extends(DailyMediaManager, _super);\n    function DailyMediaManager(enablePlayer, enableRecording, onTrackStartedCallback, onTrackStoppedCallback, recorderChunkSize, recorderSampleRate, playerSampleRate) {\n        if (enablePlayer === void 0) enablePlayer = true;\n        if (enableRecording === void 0) enableRecording = true;\n        if (recorderChunkSize === void 0) recorderChunkSize = undefined;\n        if (recorderSampleRate === void 0) recorderSampleRate = 24000;\n        if (playerSampleRate === void 0) playerSampleRate = 24000;\n        var _a;\n        var _this = _super.call(this) || this;\n        _this._selectedCam = {};\n        _this._selectedMic = {};\n        _this._selectedSpeaker = {};\n        _this._remoteAudioLevelInterval = null;\n        _this._recorderChunkSize = undefined;\n        _this._initialized = false;\n        _this._connected = false;\n        _this._currentAudioTrack = null;\n        _this._connectResolve = null;\n        _this.onTrackStartedCallback = onTrackStartedCallback;\n        _this.onTrackStoppedCallback = onTrackStoppedCallback;\n        _this._recorderChunkSize = recorderChunkSize;\n        _this._daily = (_a = (0, _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]).getCallInstance()) !== null && _a !== void 0 ? _a : (0, _daily_co_daily_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]).createCallObject();\n        if (enableRecording) _this._mediaStreamRecorder = new (0, $5fc11d7bc0d20724$export$2934cf2d25c67a48)({\n            sampleRate: recorderSampleRate\n        });\n        if (enablePlayer) _this._wavStreamPlayer = new (0, $d0a969833958d9e7$export$9698d62c78b8f366)({\n            sampleRate: playerSampleRate\n        });\n        _this._daily.on(\"track-started\", _this.handleTrackStarted.bind(_this));\n        _this._daily.on(\"track-stopped\", _this.handleTrackStopped.bind(_this));\n        _this._daily.on(\"available-devices-updated\", _this._handleAvailableDevicesUpdated.bind(_this));\n        _this._daily.on(\"selected-devices-updated\", _this._handleSelectedDevicesUpdated.bind(_this));\n        _this._daily.on(\"local-audio-level\", _this._handleLocalAudioLevel.bind(_this));\n        return _this;\n    }\n    DailyMediaManager.prototype.initialize = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var infos, devices, cams, mics, speakers;\n            var _this = this;\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n            return $22ece045290c996a$var$__generator(this, function(_o) {\n                switch(_o.label){\n                    case 0:\n                        if (this._initialized) {\n                            console.warn(\"DailyMediaManager already initialized\");\n                            return [\n                                2 /*return*/ \n                            ];\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.startCamera({\n                                startVideoOff: !this._camEnabled,\n                                startAudioOff: !this._micEnabled\n                            })\n                        ];\n                    case 1:\n                        infos = _o.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.enumerateDevices()\n                        ];\n                    case 2:\n                        devices = _o.sent().devices;\n                        cams = devices.filter(function(d) {\n                            return d.kind === \"videoinput\";\n                        });\n                        mics = devices.filter(function(d) {\n                            return d.kind === \"audioinput\";\n                        });\n                        speakers = devices.filter(function(d) {\n                            return d.kind === \"audiooutput\";\n                        });\n                        (_b = (_a = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a, cams);\n                        (_d = (_c = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c, mics);\n                        (_f = (_e = this._callbacks).onAvailableSpeakersUpdated) === null || _f === void 0 || _f.call(_e, speakers);\n                        this._selectedCam = infos.camera;\n                        (_h = (_g = this._callbacks).onCamUpdated) === null || _h === void 0 || _h.call(_g, infos.camera);\n                        this._selectedMic = infos.mic;\n                        (_k = (_j = this._callbacks).onMicUpdated) === null || _k === void 0 || _k.call(_j, infos.mic);\n                        this._selectedSpeaker = infos.speaker;\n                        (_m = (_l = this._callbacks).onSpeakerUpdated) === null || _m === void 0 || _m.call(_l, infos.speaker);\n                        if (!!this._daily.isLocalAudioLevelObserverRunning()) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.startLocalAudioLevelObserver(100)\n                        ];\n                    case 3:\n                        _o.sent();\n                        _o.label = 4;\n                    case 4:\n                        if (!this._wavStreamPlayer) return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._wavStreamPlayer.connect()\n                        ];\n                    case 5:\n                        _o.sent();\n                        if (!this._remoteAudioLevelInterval) this._remoteAudioLevelInterval = setInterval(function() {\n                            var _a;\n                            var frequencies = _this._wavStreamPlayer.getFrequencies();\n                            var aveVal = 0;\n                            if ((_a = frequencies.values) === null || _a === void 0 ? void 0 : _a.length) aveVal = frequencies.values.reduce(function(a, c) {\n                                return a + c;\n                            }, 0) / frequencies.values.length;\n                            _this._handleRemoteAudioLevel(aveVal);\n                        }, 100);\n                        _o.label = 6;\n                    case 6:\n                        this._initialized = true;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.connect = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var _this = this;\n            return $22ece045290c996a$var$__generator(this, function(_a) {\n                if (this._connected) {\n                    console.warn(\"DailyMediaManager already connected\");\n                    return [\n                        2 /*return*/ \n                    ];\n                }\n                this._connected = true;\n                if (!this._initialized) return [\n                    2 /*return*/ ,\n                    new Promise(function(resolve) {\n                        (function() {\n                            return $22ece045290c996a$var$__awaiter(_this, void 0, void 0, function() {\n                                return $22ece045290c996a$var$__generator(this, function(_a) {\n                                    switch(_a.label){\n                                        case 0:\n                                            this._connectResolve = resolve;\n                                            return [\n                                                4 /*yield*/ ,\n                                                this.initialize()\n                                            ];\n                                        case 1:\n                                            _a.sent();\n                                            return [\n                                                2 /*return*/ \n                                            ];\n                                    }\n                                });\n                            });\n                        })();\n                    })\n                ];\n                if (this._micEnabled) this._startRecording();\n                return [\n                    2 /*return*/ \n                ];\n            });\n        });\n    };\n    DailyMediaManager.prototype.disconnect = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var _a, _b;\n            return $22ece045290c996a$var$__generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        if (this._remoteAudioLevelInterval) clearInterval(this._remoteAudioLevelInterval);\n                        this._remoteAudioLevelInterval = null;\n                        this._daily.leave();\n                        this._currentAudioTrack = null;\n                        return [\n                            4 /*yield*/ ,\n                            (_a = this._mediaStreamRecorder) === null || _a === void 0 ? void 0 : _a.end()\n                        ];\n                    case 1:\n                        _c.sent();\n                        (_b = this._wavStreamPlayer) === null || _b === void 0 || _b.interrupt();\n                        this._initialized = false;\n                        this._connected = false;\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.userStartedSpeaking = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var _a;\n            return $22ece045290c996a$var$__generator(this, function(_b) {\n                return [\n                    2 /*return*/ ,\n                    (_a = this._wavStreamPlayer) === null || _a === void 0 ? void 0 : _a.interrupt()\n                ];\n            });\n        });\n    };\n    DailyMediaManager.prototype.bufferBotAudio = function(data, id) {\n        var _a;\n        return (_a = this._wavStreamPlayer) === null || _a === void 0 ? void 0 : _a.add16BitPCM(data, id);\n    };\n    DailyMediaManager.prototype.getAllMics = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var devices;\n            return $22ece045290c996a$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.enumerateDevices()\n                        ];\n                    case 1:\n                        devices = _a.sent().devices;\n                        return [\n                            2 /*return*/ ,\n                            devices.filter(function(device) {\n                                return device.kind === \"audioinput\";\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.getAllCams = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var devices;\n            return $22ece045290c996a$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.enumerateDevices()\n                        ];\n                    case 1:\n                        devices = _a.sent().devices;\n                        return [\n                            2 /*return*/ ,\n                            devices.filter(function(device) {\n                                return device.kind === \"videoinput\";\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.getAllSpeakers = function() {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var devices;\n            return $22ece045290c996a$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this._daily.enumerateDevices()\n                        ];\n                    case 1:\n                        devices = _a.sent().devices;\n                        return [\n                            2 /*return*/ ,\n                            devices.filter(function(device) {\n                                return device.kind === \"audiooutput\";\n                            })\n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.updateMic = function(micId) {\n        var _this = this;\n        this._daily.setInputDevicesAsync({\n            audioDeviceId: micId\n        }).then(function(deviceInfo) {\n            _this._selectedMic = deviceInfo.mic;\n        });\n    };\n    DailyMediaManager.prototype.updateCam = function(camId) {\n        var _this = this;\n        this._daily.setInputDevicesAsync({\n            videoDeviceId: camId\n        }).then(function(deviceInfo) {\n            _this._selectedCam = deviceInfo.camera;\n        });\n    };\n    DailyMediaManager.prototype.updateSpeaker = function(speakerId) {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var sID, speakers, defaultSpeaker_1, defaultSpeakerCp;\n            var _this = this;\n            var _a, _b;\n            return $22ece045290c996a$var$__generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        if (speakerId !== \"default\" && this._selectedSpeaker.deviceId === speakerId) return [\n                            2 /*return*/ \n                        ];\n                        sID = speakerId;\n                        if (!(sID === \"default\")) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.getAllSpeakers()\n                        ];\n                    case 1:\n                        speakers = _c.sent();\n                        defaultSpeaker_1 = speakers.find(function(s) {\n                            return s.deviceId === \"default\";\n                        });\n                        if (!defaultSpeaker_1) {\n                            console.warn(\"No default speaker found\");\n                            return [\n                                2 /*return*/ \n                            ];\n                        }\n                        speakers.splice(speakers.indexOf(defaultSpeaker_1), 1);\n                        defaultSpeakerCp = speakers.find(function(s) {\n                            return defaultSpeaker_1.label.includes(s.label);\n                        });\n                        sID = (_a = defaultSpeakerCp === null || defaultSpeakerCp === void 0 ? void 0 : defaultSpeakerCp.deviceId) !== null && _a !== void 0 ? _a : speakerId;\n                        _c.label = 2;\n                    case 2:\n                        (_b = this._wavStreamPlayer) === null || _b === void 0 || _b.updateSpeaker(sID).then(function() {\n                            var _a, _b;\n                            _this._selectedSpeaker = {\n                                deviceId: speakerId\n                            };\n                            (_b = (_a = _this._callbacks).onSpeakerUpdated) === null || _b === void 0 || _b.call(_a, _this._selectedSpeaker);\n                        });\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    Object.defineProperty(DailyMediaManager.prototype, \"selectedMic\", {\n        get: function() {\n            return this._selectedMic;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DailyMediaManager.prototype, \"selectedCam\", {\n        get: function() {\n            return this._selectedCam;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DailyMediaManager.prototype, \"selectedSpeaker\", {\n        get: function() {\n            return this._selectedSpeaker;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DailyMediaManager.prototype.enableMic = function(enable) {\n        return $22ece045290c996a$var$__awaiter(this, void 0, Promise, function() {\n            var _a;\n            return $22ece045290c996a$var$__generator(this, function(_b) {\n                this._micEnabled = enable;\n                if (!((_a = this._daily.participants()) === null || _a === void 0 ? void 0 : _a.local)) return [\n                    2 /*return*/ \n                ];\n                this._daily.setLocalAudio(enable);\n                if (this._mediaStreamRecorder) {\n                    if (enable) {\n                        if (this._mediaStreamRecorder.getStatus() === \"paused\") this._startRecording();\n                         // else, we'll record on the track-started event\n                    } else if (this._mediaStreamRecorder.getStatus() === \"recording\") this._mediaStreamRecorder.pause();\n                }\n                return [\n                    2 /*return*/ \n                ];\n            });\n        });\n    };\n    DailyMediaManager.prototype.enableCam = function(enable) {\n        this._camEnabled = enable;\n        this._daily.setLocalVideo(enable);\n    };\n    Object.defineProperty(DailyMediaManager.prototype, \"isCamEnabled\", {\n        get: function() {\n            return this._daily.localVideo();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DailyMediaManager.prototype, \"isMicEnabled\", {\n        get: function() {\n            return this._daily.localAudio();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DailyMediaManager.prototype.tracks = function() {\n        var _a, _b, _c, _d, _e, _f;\n        var participants = this._daily.participants();\n        return {\n            local: {\n                audio: (_c = (_b = (_a = participants === null || participants === void 0 ? void 0 : participants.local) === null || _a === void 0 ? void 0 : _a.tracks) === null || _b === void 0 ? void 0 : _b.audio) === null || _c === void 0 ? void 0 : _c.persistentTrack,\n                video: (_f = (_e = (_d = participants === null || participants === void 0 ? void 0 : participants.local) === null || _d === void 0 ? void 0 : _d.tracks) === null || _e === void 0 ? void 0 : _e.video) === null || _f === void 0 ? void 0 : _f.persistentTrack\n            }\n        };\n    };\n    DailyMediaManager.prototype._startRecording = function() {\n        var _this = this;\n        if (!this._connected || !this._mediaStreamRecorder) return;\n        try {\n            this._mediaStreamRecorder.record(function(data) {\n                _this._userAudioCallback(data.mono);\n            }, this._recorderChunkSize);\n        } catch (e) {\n            var err = e;\n            if (!err.message.includes(\"Already recording\")) console.error(\"Error starting recording\", e);\n        }\n    };\n    DailyMediaManager.prototype._handleAvailableDevicesUpdated = function(event) {\n        var _a, _b, _c, _d, _e, _f;\n        (_b = (_a = this._callbacks).onAvailableCamsUpdated) === null || _b === void 0 || _b.call(_a, event.availableDevices.filter(function(d) {\n            return d.kind === \"videoinput\";\n        }));\n        (_d = (_c = this._callbacks).onAvailableMicsUpdated) === null || _d === void 0 || _d.call(_c, event.availableDevices.filter(function(d) {\n            return d.kind === \"audioinput\";\n        }));\n        (_f = (_e = this._callbacks).onAvailableSpeakersUpdated) === null || _f === void 0 || _f.call(_e, event.availableDevices.filter(function(d) {\n            return d.kind === \"audiooutput\";\n        }));\n        if (this._selectedSpeaker.deviceId === \"default\") this.updateSpeaker(\"default\");\n    };\n    DailyMediaManager.prototype._handleSelectedDevicesUpdated = function(event) {\n        var _a, _b, _c, _d, _e, _f;\n        if (((_a = this._selectedCam) === null || _a === void 0 ? void 0 : _a.deviceId) !== event.devices.camera) {\n            this._selectedCam = event.devices.camera;\n            (_c = (_b = this._callbacks).onCamUpdated) === null || _c === void 0 || _c.call(_b, event.devices.camera);\n        }\n        if (((_d = this._selectedMic) === null || _d === void 0 ? void 0 : _d.deviceId) !== event.devices.mic) {\n            this._selectedMic = event.devices.mic;\n            (_f = (_e = this._callbacks).onMicUpdated) === null || _f === void 0 || _f.call(_e, event.devices.mic);\n        }\n    };\n    DailyMediaManager.prototype._handleLocalAudioLevel = function(ev) {\n        var _a, _b;\n        (_b = (_a = this._callbacks).onLocalAudioLevel) === null || _b === void 0 || _b.call(_a, ev.audioLevel);\n    };\n    DailyMediaManager.prototype._handleRemoteAudioLevel = function(audioLevel) {\n        var _a, _b;\n        (_b = (_a = this._callbacks).onRemoteAudioLevel) === null || _b === void 0 || _b.call(_a, audioLevel, $22ece045290c996a$var$botParticipant());\n    };\n    DailyMediaManager.prototype.handleTrackStarted = function(event) {\n        return $22ece045290c996a$var$__awaiter(this, void 0, void 0, function() {\n            var status, _a;\n            var _b, _c, _d, _e;\n            return $22ece045290c996a$var$__generator(this, function(_f) {\n                switch(_f.label){\n                    case 0:\n                        if (!((_b = event.participant) === null || _b === void 0 ? void 0 : _b.local)) return [\n                            2 /*return*/ \n                        ];\n                        if (!(event.track.kind === \"audio\")) return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                        if (!this._mediaStreamRecorder) return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                        status = this._mediaStreamRecorder.getStatus();\n                        _a = status;\n                        switch(_a){\n                            case \"ended\":\n                                return [\n                                    3 /*break*/ ,\n                                    1\n                                ];\n                            case \"paused\":\n                                return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                            case \"recording\":\n                                return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                        }\n                        return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                    case 1:\n                        return [\n                            4 /*yield*/ ,\n                            this._mediaStreamRecorder.begin(event.track)\n                        ];\n                    case 2:\n                        _f.sent();\n                        if (this._connected) {\n                            this._startRecording();\n                            if (this._connectResolve) {\n                                this._connectResolve();\n                                this._connectResolve = null;\n                            }\n                        }\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 3:\n                        this._startRecording();\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 4:\n                        if (!(this._currentAudioTrack !== event.track)) return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this._mediaStreamRecorder.end()\n                        ];\n                    case 5:\n                        _f.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this._mediaStreamRecorder.begin(event.track)\n                        ];\n                    case 6:\n                        _f.sent();\n                        this._startRecording();\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 7:\n                        console.warn(\"track-started event received for current track and already recording\");\n                        _f.label = 8;\n                    case 8:\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 9:\n                        this._currentAudioTrack = event.track;\n                        _f.label = 10;\n                    case 10:\n                        (_d = (_c = this._callbacks).onTrackStarted) === null || _d === void 0 || _d.call(_c, event.track, event.participant ? $22ece045290c996a$var$dailyParticipantToParticipant(event.participant) : undefined);\n                        (_e = this.onTrackStartedCallback) === null || _e === void 0 || _e.call(this, event);\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    DailyMediaManager.prototype.handleTrackStopped = function(event) {\n        var _a, _b, _c, _d;\n        if (!((_a = event.participant) === null || _a === void 0 ? void 0 : _a.local)) return;\n        if (event.track.kind === \"audio\") {\n            if (this._mediaStreamRecorder && this._mediaStreamRecorder.getStatus() === \"recording\") this._mediaStreamRecorder.pause();\n        }\n        (_c = (_b = this._callbacks).onTrackStopped) === null || _c === void 0 || _c.call(_b, event.track, event.participant ? $22ece045290c996a$var$dailyParticipantToParticipant(event.participant) : undefined);\n        (_d = this.onTrackStoppedCallback) === null || _d === void 0 || _d.call(this, event);\n    };\n    return DailyMediaManager;\n}((0, $fc49a56cd8739127$export$4a0c46dbbe2ddb67));\nvar $22ece045290c996a$var$dailyParticipantToParticipant = function(p) {\n    return {\n        id: p.user_id,\n        local: p.local,\n        name: p.user_name\n    };\n};\nvar $22ece045290c996a$var$botParticipant = function() {\n    return {\n        id: \"bot\",\n        local: false,\n        name: \"Bot\"\n    };\n};\n\n\n\n\nvar $032380dbcf3f4e13$var$__extends =  false || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar $032380dbcf3f4e13$var$__awaiter =  false || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar $032380dbcf3f4e13$var$__generator =  false || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar $032380dbcf3f4e13$var$__spreadArray =  false || function(to, from, pack) {\n    if (pack || arguments.length === 2) {\n        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar $032380dbcf3f4e13$var$readyStates = [\n    \"CONNECTING\",\n    \"OPEN\",\n    \"CLOSING\",\n    \"CLOSED\"\n];\nvar $032380dbcf3f4e13$var$KEEP_ALIVE_INTERVAL = 5000;\nvar $032380dbcf3f4e13$var$KEEP_ALIVE_TIMEOUT = 15000;\n// client side code in soupSFU has a timeout of 15 seconds for command response\n// 5 seconds seems reasonable that it provides roughly 3 retry attempts\nvar $032380dbcf3f4e13$var$WEBSOCKET_CONNECTION_TIMEOUT = 150000;\nvar $032380dbcf3f4e13$var$DEFAULT_RECONNECT_ATTEMPTS = 2;\nvar $032380dbcf3f4e13$var$MAX_RECONNECT_ATTEMPTS = 10;\nvar $032380dbcf3f4e13$var$DEFAULT_RECONNECT_INTERVAL = 1000;\nvar $032380dbcf3f4e13$var$MAX_RECONNECT_INTERVAL = 30000;\nvar $032380dbcf3f4e13$var$DEFAULT_RECONNECT_DECAY = 1.5;\nvar $032380dbcf3f4e13$var$WEBSOCKET_TIMEOUT_CODE = 4100;\nvar $032380dbcf3f4e13$var$SIG_CONNECTION_CANCELED = \"SIG_CONNECTION_CANCELED\";\nvar $032380dbcf3f4e13$var$WEBSOCKET_ERROR = \"WEBSOCKET_ERROR\";\nvar $032380dbcf3f4e13$var$LOG_LEVEL;\n(function(LOG_LEVEL) {\n    LOG_LEVEL[LOG_LEVEL[\"DEBUG\"] = 0] = \"DEBUG\";\n    LOG_LEVEL[LOG_LEVEL[\"ERROR\"] = 1] = \"ERROR\";\n    LOG_LEVEL[LOG_LEVEL[\"INFO\"] = 2] = \"INFO\";\n    LOG_LEVEL[LOG_LEVEL[\"WARN\"] = 3] = \"WARN\";\n})($032380dbcf3f4e13$var$LOG_LEVEL || ($032380dbcf3f4e13$var$LOG_LEVEL = {}));\nvar $032380dbcf3f4e13$var$rWebSocket = /** @class */ function() {\n    function rWebSocket(url, protocols) {\n        this._closedManually = false;\n        this._errored = false;\n        this._rejected = false;\n        this._timed_out = false;\n        this._initialConnectionOk = false;\n        this._ws = new WebSocket(url, protocols);\n    }\n    rWebSocket.prototype.addEventListener = function(type, listener) {\n        this._ws.addEventListener(type, listener);\n    };\n    // Add other WebSocket methods as needed\n    rWebSocket.prototype.close = function(code, reason) {\n        this._ws.close(code, reason);\n    };\n    rWebSocket.prototype.send = function(data) {\n        this._ws.send(data);\n    };\n    Object.defineProperty(rWebSocket.prototype, \"url\", {\n        // Add getters for WebSocket properties\n        get: function() {\n            return this._ws.url;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(rWebSocket.prototype, \"readyState\", {\n        get: function() {\n            return this._ws.readyState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return rWebSocket;\n}();\n/**\n * Builds on top of Javascript Websockets\n *\n * This behaves like the Websocket library in every way, except if it fails to\n * connect or if it gets disconnected, it will try to reconnect depending on\n * the maximum number of reconnect attempts set. retry is not enabled for initial\n * connection. When initial connection fails it is best to check yourself before\n * you keep wreckin' yourself.\n *\n * It is API compatible, so when you have:\n *   ws = new WebSocket('ws://....');\n * you can replace with:\n *   ws = new ReconnectingWebSocket('ws://....');\n *\n * While it is API compatible with the NodeJS ws library, we provide the\n * following additional properties and events on the ReconnectingWebSocket.\n *\n * Events:\n *\n * connection-timeout\n * - Emitted when the web socket connection times out.\n *\n * reconnecting\n * - Emitted after a manual close of the web socket is done and before retrying\n *   the connection.\n *\n * reconnect-failed\n * - Emitted when the number of connection attempts exceeds the set number of\n *   reconnection attempts.\n *\n * keep-alive\n * - Emitted when the set keep alive interval elapses. This event may be used\n *   to have ping pong keep-alive mechanism for web socket health.\n *\n * Properties:\n *\n * keepAliveTimeout\n * - The timeout for keep-alive. Default: 15000\n *\n * keepAliveInterval\n * - The interval at which to emit keep-alive event. Default: 5000\n *\n * shouldRetryFn\n * - A callback function which should return boolean to determine if a web\n *   socket reconnection attempt should be made. When not set, connection is\n *   always retried.\n *\n * connectionTimeout\n * - The timeout interval for considering whether the connection timed out.\n *   Default: 20000 ms\n *\n * maxReconnectAttempts\n * - The maximum number of attempts to be made for reconnection. Default: 2\n *\n * reconnectInterval\n * - The interval to wait before attempting a reconnection. Default: 1000 ms\n */ var $032380dbcf3f4e13$export$4f3d0ffd941ebefb = /** @class */ function(_super) {\n    $032380dbcf3f4e13$var$__extends(ReconnectingWebSocket, _super);\n    function ReconnectingWebSocket(address, protocols, options) {\n        if (options === void 0) options = {};\n        var _a;\n        var _this = _super.call(this) || this;\n        if (!address) throw new Error(\"Need a valid WebSocket URL\");\n        _this._ws = null;\n        _this._url = address;\n        _this._protocols = protocols;\n        _this._parseBlobToJson = (_a = options === null || options === void 0 ? void 0 : options.parseBlobToJson) !== null && _a !== void 0 ? _a : true;\n        _this.init();\n        return _this;\n    }\n    ReconnectingWebSocket.prototype.init = function() {\n        this._keepAliveTimeout = $032380dbcf3f4e13$var$KEEP_ALIVE_TIMEOUT;\n        this._keepAliveInterval = $032380dbcf3f4e13$var$KEEP_ALIVE_INTERVAL;\n        this._disconnected = false;\n        this._keepIntervalID = null;\n        this._shouldRetryFn = null;\n        this._connectionTimeout = $032380dbcf3f4e13$var$WEBSOCKET_CONNECTION_TIMEOUT;\n        this._reconnectAttempts = 0;\n        this._allowedReconnectAttempts = $032380dbcf3f4e13$var$DEFAULT_RECONNECT_ATTEMPTS;\n        this._reconnectInterval = $032380dbcf3f4e13$var$DEFAULT_RECONNECT_INTERVAL;\n        this._maxReconnectInterval = $032380dbcf3f4e13$var$MAX_RECONNECT_INTERVAL;\n        this._reconnectDecay = $032380dbcf3f4e13$var$DEFAULT_RECONNECT_DECAY;\n    };\n    ReconnectingWebSocket.prototype.connect = function() {\n        return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {\n            var _this = this;\n            return $032380dbcf3f4e13$var$__generator(this, function(_a) {\n                return [\n                    2 /*return*/ ,\n                    new Promise(function(resolve, reject) {\n                        _this._disconnected = false;\n                        _this.clearReconnectTimeout();\n                        var ws = new $032380dbcf3f4e13$var$rWebSocket(_this._url, _this._protocols);\n                        _this.setConnectionTimeout();\n                        ws.addEventListener(\"close\", function(evt) {\n                            var closeEvent = evt;\n                            var code = ws._timed_out ? $032380dbcf3f4e13$var$WEBSOCKET_TIMEOUT_CODE : closeEvent.code;\n                            var reason = ws._timed_out ? \"websocket connection timed out\" : closeEvent.reason;\n                            ws._timed_out = false;\n                            if (!ws._closedManually && ws._initialConnectionOk) {\n                                console.warn(\"signaling socket closed unexpectedly: \".concat(code).concat(reason ? \" \" + reason : \"\"));\n                                _this._closeSocket();\n                                _this.emit(\"close\", code, reason);\n                            } else _this.log(\"signaling socket closed\");\n                            if (!ws._closedManually && (ws._errored || ws._timed_out)) {\n                                console.warn(\"signaling socket closed on error: \".concat(code).concat(reason ? \" \" + reason : \"\"));\n                                if (!ws._rejected) {\n                                    ws._rejected = true;\n                                    var err = new Error(\"WebSocket connection error (\".concat(code, \"): \").concat(reason));\n                                    err.name = $032380dbcf3f4e13$var$WEBSOCKET_ERROR;\n                                    reject(err);\n                                }\n                            }\n                        });\n                        ws.addEventListener(\"open\", function(evt) {\n                            _this.log(\"wss connection opened to\", $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG, _this._url);\n                            _this.clearConnectionTimeout();\n                            // now that the timeout closes the socket, in theory this onopen\n                            // callback should never happen in the first place, but seems\n                            // harmless to leave these safeguards in\n                            if (ws._rejected || ws._timed_out) return;\n                            if (ws._closedManually || _this._ws && _this._ws !== ws) {\n                                ws._rejected = true;\n                                ws.close();\n                                var err = Error(\"wss connection interrupted by disconnect or newer connection\");\n                                err.name = $032380dbcf3f4e13$var$SIG_CONNECTION_CANCELED;\n                                reject(err);\n                                return;\n                            }\n                            ws._initialConnectionOk = _this._url;\n                            _this._lastMsgRecvTime = Date.now();\n                            if (_this._keepAliveInterval) _this._keepIntervalID = setInterval(function() {\n                                return _this.checkSocketHealthAndSendKeepAlive();\n                            }, _this._keepAliveInterval);\n                            _this._ws = ws;\n                            _this.emit(\"open\");\n                            resolve(ws);\n                        });\n                        ws.addEventListener(\"error\", function(evt) {\n                            // fyi: evt is an Event here, with 0 amount of helpful info. If there\n                            //   happens to be info about the error, it's included in the\n                            //   accompanying close event (because that make sense. shakes head)\n                            //   SO. We do not reject here. Instead, we just set the _errored\n                            //   flag on the socket so when the close event occurs, it knows to\n                            //   reject the promise\n                            if (!ws._closedManually) {\n                                var wsTarget = evt.currentTarget;\n                                _this.log(\"websocket error event: \".concat(wsTarget === null || wsTarget === void 0 ? void 0 : wsTarget.url));\n                            }\n                            ws._errored = true;\n                        });\n                        ws.addEventListener(\"message\", function(msg) {\n                            _this._handleMessage(msg);\n                        });\n                    })\n                ];\n            });\n        });\n    };\n    ReconnectingWebSocket.prototype.setConnectionTimeout = function() {\n        var _this = this;\n        this._connectionTimeoutID = setTimeout(function() {\n            return $032380dbcf3f4e13$var$__awaiter(_this, void 0, void 0, function() {\n                return $032380dbcf3f4e13$var$__generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            this.log(\"Connection reconnect attempt timed out.\");\n                            this.emit(\"connection-timeout\");\n                            this.clearConnectionTimeout();\n                            return [\n                                4 /*yield*/ ,\n                                this._closeSocket()\n                            ];\n                        case 1:\n                            _a.sent();\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        }, this._connectionTimeout);\n    };\n    ReconnectingWebSocket.prototype.clearConnectionTimeout = function() {\n        clearTimeout(this._connectionTimeoutID);\n        this._connectionTimeoutID = undefined;\n    };\n    ReconnectingWebSocket.prototype.clearReconnectTimeout = function() {\n        clearTimeout(this._reconnectTimeoutID);\n        this._reconnectTimeoutID = undefined;\n    };\n    ReconnectingWebSocket.prototype.clearKeepAliveInterval = function() {\n        if (this._keepIntervalID) {\n            clearInterval(this._keepIntervalID);\n            this._keepIntervalID = null;\n        }\n    };\n    ReconnectingWebSocket.prototype.checkSocketHealthAndSendKeepAlive = function() {\n        return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {\n            return $032380dbcf3f4e13$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        if (!(this._ws && this._ws.readyState === WebSocket.OPEN)) return [\n                            2 /*return*/ \n                        ];\n                        if (!this._keepAliveTimeout || !this._keepAliveInterval) return [\n                            2 /*return*/ \n                        ];\n                        if (!(Date.now() - this._lastMsgRecvTime > this._keepAliveTimeout)) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        this.log(\"Connection is stale, need to reconnect\", $032380dbcf3f4e13$var$LOG_LEVEL.WARN);\n                        return [\n                            4 /*yield*/ ,\n                            this._closeSocket()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            2 /*return*/ \n                        ];\n                    case 2:\n                        // Only emit the keep-alive event if we haven't sent anything else recently\n                        if (Date.now() - this._lastMsgSendTime < this._keepAliveInterval) return [\n                            2 /*return*/ \n                        ];\n                        this.log(\"Emitting keep-alive\", $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG);\n                        this.emit(\"keep-alive\");\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    // We use the word manually here to imply the application using this code\n    // or this code itself will decide to close the socket.\n    ReconnectingWebSocket.prototype._closeSocket = function() {\n        return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {\n            var shouldRetry, error_1;\n            var _a;\n            return $032380dbcf3f4e13$var$__generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        this.log(\"Closing\");\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([\n                            1,\n                            4,\n                            ,\n                            5\n                        ]);\n                        this.clearKeepAliveInterval();\n                        this._lastMsgRecvTime = 0;\n                        if (this._ws) {\n                            this._ws._closedManually = true;\n                            this._ws.close();\n                        }\n                        shouldRetry = ((_a = this._ws) === null || _a === void 0 ? void 0 : _a._initialConnectionOk) && this._shouldRetryFn && this._shouldRetryFn();\n                        this._ws = null;\n                        if (!shouldRetry) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        this.log(\"Emitting reconnect\", $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG);\n                        this.emit(\"reconnecting\");\n                        return [\n                            4 /*yield*/ ,\n                            this.retryFailedConnection()\n                        ];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                    case 4:\n                        error_1 = _b.sent();\n                        this.log(\"Error while closing and retrying: \".concat(error_1), $032380dbcf3f4e13$var$LOG_LEVEL.ERROR);\n                        return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                    case 5:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    ReconnectingWebSocket.prototype.retryFailedConnection = function() {\n        return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {\n            var timeout;\n            var _this = this;\n            return $032380dbcf3f4e13$var$__generator(this, function(_a) {\n                if (this._reconnectAttempts < this._allowedReconnectAttempts) {\n                    if (this._reconnectTimeoutID) {\n                        this.log(\"Retry already scheduled\");\n                        return [\n                            2 /*return*/ \n                        ];\n                    }\n                    this.log(\"Retrying failed connection\");\n                    timeout = // The timeout logic is taken from\n                    // https://github.com/joewalnes/reconnecting-websocket\n                    this._reconnectInterval * Math.pow(this._reconnectDecay, this._reconnectAttempts);\n                    timeout = timeout > this._maxReconnectInterval ? this._maxReconnectInterval : timeout;\n                    this.log(\"Reconnecting in \".concat(timeout / 1000, \" seconds\"));\n                    this._reconnectAttempts += 1;\n                    this._reconnectTimeoutID = setTimeout(function() {\n                        return _this.connect();\n                    }, timeout);\n                } else {\n                    this.log(\"Maximum connection retry attempts exceeded\", $032380dbcf3f4e13$var$LOG_LEVEL.ERROR);\n                    this.emit(\"reconnect-failed\");\n                }\n                return [\n                    2 /*return*/ \n                ];\n            });\n        });\n    };\n    ReconnectingWebSocket.prototype.log = function(msg, log_level) {\n        if (log_level === void 0) log_level = $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG;\n        var args = [];\n        for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];\n        switch(log_level){\n            case $032380dbcf3f4e13$var$LOG_LEVEL.DEBUG:\n                console.debug.apply(console, $032380dbcf3f4e13$var$__spreadArray([\n                    \"websocket: \".concat(msg)\n                ], args, false));\n                break;\n            case $032380dbcf3f4e13$var$LOG_LEVEL.ERROR:\n                console.error.apply(console, $032380dbcf3f4e13$var$__spreadArray([\n                    \"websocket: \".concat(msg)\n                ], args, false));\n                break;\n            case $032380dbcf3f4e13$var$LOG_LEVEL.WARN:\n                console.warn.apply(console, $032380dbcf3f4e13$var$__spreadArray([\n                    \"websocket: \".concat(msg)\n                ], args, false));\n                break;\n            case $032380dbcf3f4e13$var$LOG_LEVEL.INFO:\n            default:\n                console.log.apply(console, $032380dbcf3f4e13$var$__spreadArray([\n                    \"websocket: \".concat(msg)\n                ], args, false));\n                break;\n        }\n    };\n    ReconnectingWebSocket.prototype.send = function(data) {\n        return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {\n            return $032380dbcf3f4e13$var$__generator(this, function(_a) {\n                try {\n                    if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n                        this._lastMsgSendTime = Date.now();\n                        this._ws.send(data);\n                    } else this.log(\"Failed to send data, web socket not open.\", $032380dbcf3f4e13$var$LOG_LEVEL.ERROR);\n                } catch (error) {\n                    this.log(\"Failed to send data. \".concat(error), $032380dbcf3f4e13$var$LOG_LEVEL.ERROR);\n                }\n                return [\n                    2 /*return*/ \n                ];\n            });\n        });\n    };\n    ReconnectingWebSocket.prototype.close = function() {\n        return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {\n            return $032380dbcf3f4e13$var$__generator(this, function(_a) {\n                try {\n                    this.log(\"Closing websocket\");\n                    this._disconnected = true;\n                    this.clearReconnectTimeout();\n                    this._closeSocket();\n                } catch (error) {\n                    this.log(\"Failed to close websocket. \".concat(error));\n                }\n                return [\n                    2 /*return*/ \n                ];\n            });\n        });\n    };\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"readyState\", {\n        get: function() {\n            var _a, _b;\n            return (_b = (_a = this._ws) === null || _a === void 0 ? void 0 : _a.readyState) !== null && _b !== void 0 ? _b : WebSocket.CLOSED;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"url\", {\n        get: function() {\n            return this._url;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"keepAliveTimeout\", {\n        get: function() {\n            return this._keepAliveTimeout;\n        },\n        set: function(keepAliveTimeout) {\n            if (typeof keepAliveTimeout === \"number\") {\n                this.log(\"Setting ACK freshness timeout to \".concat(keepAliveTimeout));\n                this._keepAliveTimeout = keepAliveTimeout;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"keepAliveInterval\", {\n        get: function() {\n            return this._keepAliveInterval;\n        },\n        set: function(keepAliveInterval) {\n            if (typeof keepAliveInterval === \"number\") {\n                this.log(\"Setting keep-alive interval to \".concat(keepAliveInterval));\n                this._keepAliveInterval = keepAliveInterval;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"shouldRetryFn\", {\n        set: function(cb) {\n            if (typeof cb === \"function\") this._shouldRetryFn = cb;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"connectionTimeout\", {\n        get: function() {\n            return this._connectionTimeout;\n        },\n        set: function(timeout) {\n            if (typeof timeout === \"number\") this._connectionTimeout = timeout;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"maxReconnectAttempts\", {\n        get: function() {\n            return this._allowedReconnectAttempts;\n        },\n        set: function(attempts) {\n            if (attempts > 0 && attempts < $032380dbcf3f4e13$var$MAX_RECONNECT_ATTEMPTS) {\n                this.log(\"Setting maximum connection retry attempts to \".concat(attempts));\n                this._allowedReconnectAttempts = attempts;\n            } else this._allowedReconnectAttempts = $032380dbcf3f4e13$var$DEFAULT_RECONNECT_ATTEMPTS;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ReconnectingWebSocket.prototype, \"reconnectInterval\", {\n        get: function() {\n            return this._reconnectInterval;\n        },\n        set: function(interval) {\n            if (typeof interval === \"number\") this._reconnectInterval = interval < this._maxReconnectInterval ? interval : this._maxReconnectInterval;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ReconnectingWebSocket.prototype._handleMessage = function(event) {\n        return $032380dbcf3f4e13$var$__awaiter(this, void 0, void 0, function() {\n            var data, _parsePromise, msg;\n            var _this = this;\n            return $032380dbcf3f4e13$var$__generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        this._lastMsgRecvTime = Date.now();\n                        data = event.data;\n                        _parsePromise = new Promise(function(resolve, reject) {\n                            if (typeof data === \"string\") // Handle text message\n                            resolve(data);\n                            else if (data instanceof ArrayBuffer) {\n                                // Handle binary message\n                                var arrayBuffer = data;\n                                // Parse the ArrayBuffer as needed\n                                // Example: Convert ArrayBuffer to Uint8Array\n                                resolve(new Uint8Array(arrayBuffer));\n                            // Process the Uint8Array as needed\n                            } else if (data instanceof Blob) {\n                                if (!_this._parseBlobToJson) {\n                                    resolve(data);\n                                    return;\n                                }\n                                // Handle Blob message\n                                var blob = data;\n                                // Convert Blob to ArrayBuffer\n                                var reader_1 = new FileReader();\n                                reader_1.onload = function() {\n                                    var text = reader_1.result;\n                                    try {\n                                        var json = JSON.parse(text);\n                                        resolve(json);\n                                    } catch (e) {\n                                        console.error(\"Failed to parse JSON from Blob:\", e);\n                                    }\n                                };\n                                reader_1.readAsText(blob);\n                            }\n                        });\n                        return [\n                            4 /*yield*/ ,\n                            _parsePromise\n                        ];\n                    case 1:\n                        msg = _a.sent();\n                        this.emit(\"message\", msg);\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return ReconnectingWebSocket;\n}((0, events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter));\n[\n    \"binaryType\",\n    \"bufferedAmount\",\n    \"extensions\",\n    \"protocol\",\n    \"readyState\",\n    \"url\",\n    \"keepAliveTimeout\",\n    \"keepAliveInterval\",\n    \"shouldRetryFn\",\n    \"connectionTimeout\",\n    \"maxReconnectAttempts\",\n    \"reconnectInterval\"\n].forEach(function(property) {\n    Object.defineProperty($032380dbcf3f4e13$export$4f3d0ffd941ebefb.prototype, property, {\n        enumerable: true\n    });\n});\n[\n    \"CONNECTING\",\n    \"OPEN\",\n    \"CLOSING\",\n    \"CLOSED\"\n].forEach(function(property) {\n    Object.defineProperty($032380dbcf3f4e13$export$4f3d0ffd941ebefb.prototype, property, {\n        enumerable: true,\n        value: $032380dbcf3f4e13$var$readyStates.indexOf(property)\n    });\n});\n[\n    \"CONNECTING\",\n    \"OPEN\",\n    \"CLOSING\",\n    \"CLOSED\"\n].forEach(function(property) {\n    Object.defineProperty($032380dbcf3f4e13$export$4f3d0ffd941ebefb, property, {\n        enumerable: true,\n        value: $032380dbcf3f4e13$var$readyStates.indexOf(property)\n    });\n});\n\n\n\n\n// @generated message type with reflection information, may provide speed optimized methods\nclass $5177d56bd0c995e0$var$TextFrame$Type extends (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_4__.MessageType) {\n    constructor(){\n        super(\"pipecat.TextFrame\", [\n            {\n                no: 1,\n                name: \"id\",\n                kind: \"scalar\",\n                T: 4 /*ScalarType.UINT64*/ ,\n                L: 0 /*LongType.BIGINT*/ \n            },\n            {\n                no: 2,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"text\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.id = 0n;\n        message.name = \"\";\n        message.text = \"\";\n        if (value !== undefined) (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint64 id */ 1:\n                    message.id = reader.uint64().toBigInt();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string text */ 3:\n                    message.text = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint64 id = 1; */ if (message.id !== 0n) writer.tag(1, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).Varint).uint64(message.id);\n        /* string name = 2; */ if (message.name !== \"\") writer.tag(2, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).string(message.name);\n        /* string text = 3; */ if (message.text !== \"\") writer.tag(3, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).string(message.text);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\nconst $5177d56bd0c995e0$export$78410ada03f6931b = new $5177d56bd0c995e0$var$TextFrame$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass $5177d56bd0c995e0$var$AudioRawFrame$Type extends (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_4__.MessageType) {\n    constructor(){\n        super(\"pipecat.AudioRawFrame\", [\n            {\n                no: 1,\n                name: \"id\",\n                kind: \"scalar\",\n                T: 4 /*ScalarType.UINT64*/ ,\n                L: 0 /*LongType.BIGINT*/ \n            },\n            {\n                no: 2,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"audio\",\n                kind: \"scalar\",\n                T: 12 /*ScalarType.BYTES*/ \n            },\n            {\n                no: 4,\n                name: \"sample_rate\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: \"num_channels\",\n                kind: \"scalar\",\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: \"pts\",\n                kind: \"scalar\",\n                opt: true,\n                T: 4 /*ScalarType.UINT64*/ ,\n                L: 0 /*LongType.BIGINT*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.id = 0n;\n        message.name = \"\";\n        message.audio = new Uint8Array(0);\n        message.sampleRate = 0;\n        message.numChannels = 0;\n        if (value !== undefined) (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint64 id */ 1:\n                    message.id = reader.uint64().toBigInt();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* bytes audio */ 3:\n                    message.audio = reader.bytes();\n                    break;\n                case /* uint32 sample_rate */ 4:\n                    message.sampleRate = reader.uint32();\n                    break;\n                case /* uint32 num_channels */ 5:\n                    message.numChannels = reader.uint32();\n                    break;\n                case /* optional uint64 pts */ 6:\n                    message.pts = reader.uint64().toBigInt();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint64 id = 1; */ if (message.id !== 0n) writer.tag(1, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).Varint).uint64(message.id);\n        /* string name = 2; */ if (message.name !== \"\") writer.tag(2, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).string(message.name);\n        /* bytes audio = 3; */ if (message.audio.length) writer.tag(3, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).bytes(message.audio);\n        /* uint32 sample_rate = 4; */ if (message.sampleRate !== 0) writer.tag(4, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).Varint).uint32(message.sampleRate);\n        /* uint32 num_channels = 5; */ if (message.numChannels !== 0) writer.tag(5, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).Varint).uint32(message.numChannels);\n        /* optional uint64 pts = 6; */ if (message.pts !== undefined) writer.tag(6, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).Varint).uint64(message.pts);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\nconst $5177d56bd0c995e0$export$51d8721de3cbff8f = new $5177d56bd0c995e0$var$AudioRawFrame$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass $5177d56bd0c995e0$var$TranscriptionFrame$Type extends (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_4__.MessageType) {\n    constructor(){\n        super(\"pipecat.TranscriptionFrame\", [\n            {\n                no: 1,\n                name: \"id\",\n                kind: \"scalar\",\n                T: 4 /*ScalarType.UINT64*/ ,\n                L: 0 /*LongType.BIGINT*/ \n            },\n            {\n                no: 2,\n                name: \"name\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: \"text\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: \"user_id\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: \"timestamp\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.id = 0n;\n        message.name = \"\";\n        message.text = \"\";\n        message.userId = \"\";\n        message.timestamp = \"\";\n        if (value !== undefined) (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* uint64 id */ 1:\n                    message.id = reader.uint64().toBigInt();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string text */ 3:\n                    message.text = reader.string();\n                    break;\n                case /* string user_id */ 4:\n                    message.userId = reader.string();\n                    break;\n                case /* string timestamp */ 5:\n                    message.timestamp = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* uint64 id = 1; */ if (message.id !== 0n) writer.tag(1, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).Varint).uint64(message.id);\n        /* string name = 2; */ if (message.name !== \"\") writer.tag(2, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).string(message.name);\n        /* string text = 3; */ if (message.text !== \"\") writer.tag(3, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).string(message.text);\n        /* string user_id = 4; */ if (message.userId !== \"\") writer.tag(4, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).string(message.userId);\n        /* string timestamp = 5; */ if (message.timestamp !== \"\") writer.tag(5, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).string(message.timestamp);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\nconst $5177d56bd0c995e0$export$10b388c15a5cdc8a = new $5177d56bd0c995e0$var$TranscriptionFrame$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass $5177d56bd0c995e0$var$MessageFrame$Type extends (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_4__.MessageType) {\n    constructor(){\n        super(\"pipecat.MessageFrame\", [\n            {\n                no: 1,\n                name: \"data\",\n                kind: \"scalar\",\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.data = \"\";\n        if (value !== undefined) (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* string data */ 1:\n                    message.data = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* string data = 1; */ if (message.data !== \"\") writer.tag(1, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).string(message.data);\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\nconst $5177d56bd0c995e0$export$bc3f45a6d434f14a = new $5177d56bd0c995e0$var$MessageFrame$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass $5177d56bd0c995e0$var$Frame$Type extends (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_4__.MessageType) {\n    constructor(){\n        super(\"pipecat.Frame\", [\n            {\n                no: 1,\n                name: \"text\",\n                kind: \"message\",\n                oneof: \"frame\",\n                T: ()=>$5177d56bd0c995e0$export$78410ada03f6931b\n            },\n            {\n                no: 2,\n                name: \"audio\",\n                kind: \"message\",\n                oneof: \"frame\",\n                T: ()=>$5177d56bd0c995e0$export$51d8721de3cbff8f\n            },\n            {\n                no: 3,\n                name: \"transcription\",\n                kind: \"message\",\n                oneof: \"frame\",\n                T: ()=>$5177d56bd0c995e0$export$10b388c15a5cdc8a\n            },\n            {\n                no: 4,\n                name: \"message\",\n                kind: \"message\",\n                oneof: \"frame\",\n                T: ()=>$5177d56bd0c995e0$export$bc3f45a6d434f14a\n            }\n        ]);\n    }\n    create(value) {\n        const message = globalThis.Object.create(this.messagePrototype);\n        message.frame = {\n            oneofKind: undefined\n        };\n        if (value !== undefined) (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.reflectionMergePartial)(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader, length, options, target) {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while(reader.pos < end){\n            let [fieldNo, wireType] = reader.tag();\n            switch(fieldNo){\n                case /* pipecat.TextFrame text */ 1:\n                    message.frame = {\n                        oneofKind: \"text\",\n                        text: $5177d56bd0c995e0$export$78410ada03f6931b.internalBinaryRead(reader, reader.uint32(), options, message.frame.text)\n                    };\n                    break;\n                case /* pipecat.AudioRawFrame audio */ 2:\n                    message.frame = {\n                        oneofKind: \"audio\",\n                        audio: $5177d56bd0c995e0$export$51d8721de3cbff8f.internalBinaryRead(reader, reader.uint32(), options, message.frame.audio)\n                    };\n                    break;\n                case /* pipecat.TranscriptionFrame transcription */ 3:\n                    message.frame = {\n                        oneofKind: \"transcription\",\n                        transcription: $5177d56bd0c995e0$export$10b388c15a5cdc8a.internalBinaryRead(reader, reader.uint32(), options, message.frame.transcription)\n                    };\n                    break;\n                case /* pipecat.MessageFrame message */ 4:\n                    message.frame = {\n                        oneofKind: \"message\",\n                        message: $5177d56bd0c995e0$export$bc3f45a6d434f14a.internalBinaryRead(reader, reader.uint32(), options, message.frame.message)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\") throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false) (u === true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message, writer, options) {\n        /* pipecat.TextFrame text = 1; */ if (message.frame.oneofKind === \"text\") $5177d56bd0c995e0$export$78410ada03f6931b.internalBinaryWrite(message.frame.text, writer.tag(1, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).fork(), options).join();\n        /* pipecat.AudioRawFrame audio = 2; */ if (message.frame.oneofKind === \"audio\") $5177d56bd0c995e0$export$51d8721de3cbff8f.internalBinaryWrite(message.frame.audio, writer.tag(2, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).fork(), options).join();\n        /* pipecat.TranscriptionFrame transcription = 3; */ if (message.frame.oneofKind === \"transcription\") $5177d56bd0c995e0$export$10b388c15a5cdc8a.internalBinaryWrite(message.frame.transcription, writer.tag(3, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).fork(), options).join();\n        /* pipecat.MessageFrame message = 4; */ if (message.frame.oneofKind === \"message\") $5177d56bd0c995e0$export$bc3f45a6d434f14a.internalBinaryWrite(message.frame.message, writer.tag(4, (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.WireType).LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false) (u == true ? (0, _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.UnknownFieldHandler).onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\nconst $5177d56bd0c995e0$export$b89a827e9254211a = new $5177d56bd0c995e0$var$Frame$Type();\n\n\nclass $a6c080dc51c9687f$export$4b2026f8e11b148a {\n    serialize(data) {}\n    serializeAudio(data, sampleRate, numChannels) {\n        const pcmByteArray = new Uint8Array(data);\n        const frame = (0, $5177d56bd0c995e0$export$b89a827e9254211a).create({\n            frame: {\n                oneofKind: \"audio\",\n                audio: {\n                    id: 0n,\n                    name: \"audio\",\n                    audio: pcmByteArray,\n                    sampleRate: sampleRate,\n                    numChannels: numChannels\n                }\n            }\n        });\n        return new Uint8Array((0, $5177d56bd0c995e0$export$b89a827e9254211a).toBinary(frame));\n    }\n    serializeMessage(msg) {\n        const frame = (0, $5177d56bd0c995e0$export$b89a827e9254211a).create({\n            frame: {\n                oneofKind: \"message\",\n                message: {\n                    data: JSON.stringify(msg)\n                }\n            }\n        });\n        return new Uint8Array((0, $5177d56bd0c995e0$export$b89a827e9254211a).toBinary(frame));\n    }\n    async deserialize(data) {\n        if (!(data instanceof Blob)) throw new Error(\"Unknown data type\");\n        const arrayBuffer = await data.arrayBuffer();\n        const parsed = (0, $5177d56bd0c995e0$export$b89a827e9254211a).fromBinary(new Uint8Array(arrayBuffer)).frame;\n        if (parsed.oneofKind === \"audio\") {\n            const audioVector = Array.from(parsed.audio.audio);\n            const uint8Array = new Uint8Array(audioVector);\n            const int16Array = new Int16Array(uint8Array.buffer);\n            return {\n                type: \"audio\",\n                audio: int16Array\n            };\n        } else if (parsed.oneofKind === \"message\") {\n            const msg = JSON.parse(parsed.message.data);\n            return {\n                type: \"message\",\n                message: msg\n            };\n        } else throw new Error(\"Unknown frame kind\");\n    }\n}\n\n\nclass $7f42eda74f1b1632$export$de21836fc42c6f9c extends (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.Transport) {\n    constructor({ serializer: serializer, recorderSampleRate: recorderSampleRate, playerSampleRate: playerSampleRate } = {\n        serializer: new (0, $a6c080dc51c9687f$export$4b2026f8e11b148a)(),\n        recorderSampleRate: $7f42eda74f1b1632$export$de21836fc42c6f9c.RECORDER_SAMPLE_RATE,\n        playerSampleRate: $7f42eda74f1b1632$export$de21836fc42c6f9c.PLAYER_SAMPLE_RATE\n    }){\n        super();\n        this.audioQueue = [];\n        this._mediaManager = new (0, $22ece045290c996a$export$c95c65abc5f47125)(true, true, undefined, undefined, 512, recorderSampleRate, playerSampleRate);\n        this._mediaManager.setUserAudioCallback(this.handleUserAudioStream.bind(this));\n        this._ws = null;\n        this._serializer = serializer;\n    }\n    initialize(options, messageHandler) {\n        this._options = options;\n        this._callbacks = options.callbacks ?? {};\n        this._onMessage = messageHandler;\n        this._mediaManager.setRTVIOptions(options);\n        this.state = \"disconnected\";\n    }\n    async initDevices() {\n        this.state = \"initializing\";\n        await this._mediaManager.initialize();\n        this.state = \"initialized\";\n    }\n    async connect(authBundle, abortController) {\n        this.state = \"connecting\";\n        try {\n            this._ws = this.initializeWebsocket(authBundle);\n            await this._ws.connect();\n            await this._mediaManager.connect();\n            this.state = \"connected\";\n            this._callbacks.onConnected?.();\n        } catch (error) {\n            const msg = `Failed to connect to websocket: ${error}`;\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(msg);\n            this.state = \"error\";\n            throw new (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.TransportStartError)(msg);\n        }\n    }\n    async disconnect() {\n        this.state = \"disconnecting\";\n        await this._mediaManager.disconnect();\n        await this._ws?.close();\n        this.state = \"disconnected\";\n        this._callbacks.onDisconnected?.();\n    }\n    getAllMics() {\n        return this._mediaManager.getAllMics();\n    }\n    getAllCams() {\n        return this._mediaManager.getAllCams();\n    }\n    getAllSpeakers() {\n        return this._mediaManager.getAllSpeakers();\n    }\n    async updateMic(micId) {\n        return this._mediaManager.updateMic(micId);\n    }\n    updateCam(camId) {\n        return this._mediaManager.updateCam(camId);\n    }\n    updateSpeaker(speakerId) {\n        return this._mediaManager.updateSpeaker(speakerId);\n    }\n    get selectedMic() {\n        return this._mediaManager.selectedMic;\n    }\n    get selectedSpeaker() {\n        return this._mediaManager.selectedSpeaker;\n    }\n    enableMic(enable) {\n        this._mediaManager.enableMic(enable);\n    }\n    get isMicEnabled() {\n        return this._mediaManager.isMicEnabled;\n    }\n    get state() {\n        return this._state;\n    }\n    set state(state) {\n        if (this._state === state) return;\n        this._state = state;\n        this._callbacks.onTransportStateChanged?.(state);\n    }\n    get expiry() {\n        return this._expiry;\n    }\n    tracks() {\n        return this._mediaManager.tracks();\n    }\n    initializeWebsocket(authBundle) {\n        console.log(\"Initializing websocket\", authBundle);\n        const ws = new (0, $032380dbcf3f4e13$export$4f3d0ffd941ebefb)(`${authBundle.ws_url}`, undefined, {\n            parseBlobToJson: false\n        });\n        // disabling the keep alive, there is no API for it inside Pipecat\n        ws.keepAliveInterval = 0;\n        ws.on(\"open\", ()=>{\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).debug(\"Websocket connection opened\");\n        });\n        ws.on(\"message\", async (data)=>{\n            try {\n                const parsed = await this._serializer.deserialize(data);\n                if (parsed.type === \"audio\") this._mediaManager.bufferBotAudio(parsed.audio);\n                else if (parsed.type === \"message\") {\n                    if (parsed.message.label === \"rtvi-ai\") this._onMessage(parsed.message);\n                }\n            } catch (e) {\n                (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"Failed to deserialize incoming message\", e);\n            }\n        });\n        ws.on(\"error\", (error)=>{\n            this.connectionError(`websocket error: ${error}`);\n        });\n        ws.on(\"connection-timeout\", ()=>{\n            this.connectionError(\"websocket connection timed out\");\n        });\n        ws.on(\"close\", (code)=>{\n            this.connectionError(`websocket connection closed. Code: ${code}`);\n        });\n        ws.on(\"reconnect-failed\", ()=>{\n            this.connectionError(`websocket reconnect failed`);\n        });\n        return ws;\n    }\n    sendReadyMessage() {\n        this.state = \"ready\";\n        this.sendMessage((0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.RTVIMessage).clientReady());\n    }\n    handleUserAudioStream(data) {\n        if (this.state === \"ready\") try {\n            this.flushAudioQueue();\n            this._sendAudioInput(data);\n        } catch (error) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"Error sending audio stream to websocket:\", error);\n            this.state = \"error\";\n        }\n        else this.audioQueue.push(data);\n    }\n    flushAudioQueue() {\n        if (this.audioQueue.length <= 0) return;\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).info(\"Will flush audio queue\", this.audioQueue.length);\n        while(this.audioQueue.length > 0){\n            const queuedData = this.audioQueue.shift();\n            if (queuedData) this._sendAudioInput(queuedData);\n        }\n    }\n    sendRawMessage(message) {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).debug(\"Received raw message to send to Web Socket\", message);\n        const encoded = this._serializer.serialize(message);\n        this._sendMsg(encoded);\n    }\n    sendMessage(message) {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).debug(\"Received message to send to Web Socket\", message);\n        const encoded = this._serializer.serializeMessage(message);\n        this._sendMsg(encoded);\n    }\n    async _sendAudioInput(data) {\n        try {\n            const encoded = this._serializer.serializeAudio(data, $7f42eda74f1b1632$export$de21836fc42c6f9c.RECORDER_SAMPLE_RATE, 1);\n            await this._sendMsg(encoded);\n        } catch (e) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"Error sending audio frame\", e);\n        }\n    }\n    async _sendMsg(msg) {\n        if (!this._ws) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"sendMsg called but WS is null\");\n            return;\n        }\n        if (this._ws.readyState !== WebSocket.OPEN) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"attempt to send to closed socket\");\n            return;\n        }\n        if (!msg) return;\n        try {\n            await this._ws.send(msg);\n        } catch (e) {\n            (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"sendMsg error\", e);\n        }\n    }\n    connectionError(errorMsg) {\n        console.error(errorMsg);\n        this.state = \"error\";\n        this.disconnect();\n    }\n    // Not implemented\n    enableScreenShare(enable) {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"startScreenShare not implemented for WebSocketTransport\");\n        throw new Error(\"Not implemented\");\n    }\n    get isSharingScreen() {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"isSharingScreen not implemented for WebSocketTransport\");\n        return false;\n    }\n    enableCam(enable) {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"enableCam not implemented for WebSocketTransport\");\n        throw new Error(\"Not implemented\");\n    }\n    get isCamEnabled() {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"isCamEnabled not implemented for WebSocketTransport\");\n        return false;\n    }\n    get selectedCam() {\n        (0, _pipecat_ai_client_js__WEBPACK_IMPORTED_MODULE_1__.logger).error(\"selectedCam not implemented for WebSocketTransport\");\n        throw new Error(\"Not implemented\");\n    }\n}\n$7f42eda74f1b1632$export$de21836fc42c6f9c.RECORDER_SAMPLE_RATE = 16000;\n$7f42eda74f1b1632$export$de21836fc42c6f9c.PLAYER_SAMPLE_RATE = 24000;\n\n\n\n\nclass $5b926fa33e35e45c$export$44a8a077420336af {\n    serialize(data) {\n        return JSON.stringify(data);\n    }\n    serializeAudio(data, sampleRate, numChannels) {\n        const pcmSamples = new Int16Array(data);\n        const muLawSamples = (0, x_law__WEBPACK_IMPORTED_MODULE_3__.mulaw).encode(pcmSamples);\n        const base64Payload = this.arrayToBase64(muLawSamples);\n        const twilioMessage = {\n            event: \"media\",\n            media: {\n                payload: base64Payload\n            }\n        };\n        return JSON.stringify(twilioMessage);\n    }\n    serializeMessage(msg) {\n        // Twilio does not support RTVI messages, so just ignore them\n        return null;\n    }\n    arrayToBase64(bytes) {\n        let binary = \"\";\n        for(let i = 0; i < bytes.byteLength; i++)binary += String.fromCharCode(bytes[i]);\n        return btoa(binary);\n    }\n    base64ToUint8Array(base64) {\n        const binaryString = atob(base64);\n        const len = binaryString.length;\n        const bytes = new Uint8Array(len);\n        for(let i = 0; i < len; i++)bytes[i] = binaryString.charCodeAt(i);\n        return bytes;\n    }\n    async deserialize(data) {\n        const jsonMessage = JSON.parse(data); // Assuming 'data' is a JSON string\n        if (jsonMessage.event === \"clear\") return {\n            type: \"raw\",\n            message: jsonMessage\n        };\n        else if (jsonMessage.event === \"media\") {\n            // Deserialize 'media' event\n            const payload = jsonMessage.media.payload;\n            const serialized_data = this.base64ToUint8Array(payload);\n            //const decoded_audio = this.ulawToPcm(serialized_data);\n            const decoded_audio = (0, x_law__WEBPACK_IMPORTED_MODULE_3__.mulaw).decode(serialized_data);\n            return {\n                type: \"audio\",\n                audio: decoded_audio\n            };\n        } else // Deserialize other message types (assuming 'frame' has 'message' field)\n        return {\n            type: \"message\",\n            message: jsonMessage.message\n        };\n    }\n}\n\n\n\n\n\n//# sourceMappingURL=index.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@pipecat-ai/websocket-transport/dist/index.module.js\n");

/***/ })

};
;